apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"compose-post-service"},"name":"compose-post-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"compose-post-service"}},"template":{"metadata":{"labels":{"app":"compose-post-service","service":"compose-post-service"}},"spec":{"containers":[{"command":["ComposePostService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"compose-post-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"compose-post-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"compose-post-service-config","subPath":"service-config.json"}]}],"hostname":"compose-post-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"compose-post-service"},"name":"compose-post-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:01Z"
    generation: 1
    labels:
      service: compose-post-service
    name: compose-post-service
    namespace: default
    resourceVersion: "169533"
    uid: 3d69a09b-0398-480e-8691-f21a8ea08cc4
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: compose-post-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: compose-post-service
          kubectl.kubernetes.io/default-logs-container: compose-post-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: compose-post-service
          security.istio.io/tlsMode: istio
          service: compose-post-service
          service.istio.io/canonical-name: compose-post-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - name: "perf"
          image: suvigyajain1/perf
          securityContext:
            privileged: true
            capabilities:
              add: 
              - SYS_PTRACE
          stdin: true
          tty: false
        - command:
          - ComposePostService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: compose-post-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: compose-post-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: compose-post-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: compose-post-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: compose-post-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: compose-post-service
          name: compose-post-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:11Z"
      lastUpdateTime: "2022-08-26T06:36:11Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:01Z"
      lastUpdateTime: "2022-08-26T06:36:11Z"
      message: ReplicaSet "compose-post-service-65dcbc65b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"home-timeline-redis"},"name":"home-timeline-redis","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"home-timeline-redis"}},"template":{"metadata":{"labels":{"app":"home-timeline-redis","service":"home-timeline-redis"}},"spec":{"containers":[{"args":["/social-network-microservices/config/redis.conf"],"image":"docker.io/library/redis:6.2.4","imagePullPolicy":"IfNotPresent","name":"home-timeline-redis","ports":[{"containerPort":6379}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/redis.conf","name":"home-timeline-redis-config","subPath":"redis.conf"}]}],"hostname":"home-timeline-redis","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"home-timeline-redis"},"name":"home-timeline-redis-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:01Z"
    generation: 1
    labels:
      service: home-timeline-redis
    name: home-timeline-redis
    namespace: default
    resourceVersion: "169494"
    uid: 70fc0d80-dbba-4233-9ada-136fbc1c3ba7
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: home-timeline-redis
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: home-timeline-redis
          kubectl.kubernetes.io/default-logs-container: home-timeline-redis
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: home-timeline-redis
          security.istio.io/tlsMode: istio
          service: home-timeline-redis
          service.istio.io/canonical-name: home-timeline-redis
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - args:
          - /social-network-microservices/config/redis.conf
          image: docker.io/library/redis:6.2.4
          imagePullPolicy: IfNotPresent
          name: home-timeline-redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/redis.conf
            name: home-timeline-redis-config
            subPath: redis.conf
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":6379,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: home-timeline-redis
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: home-timeline-redis
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: home-timeline-redis
          name: home-timeline-redis-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:09Z"
      lastUpdateTime: "2022-08-26T06:36:09Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:01Z"
      lastUpdateTime: "2022-08-26T06:36:09Z"
      message: ReplicaSet "home-timeline-redis-77cf545cdb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"home-timeline-service"},"name":"home-timeline-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"home-timeline-service"}},"template":{"metadata":{"labels":{"app":"home-timeline-service","service":"home-timeline-service"}},"spec":{"containers":[{"command":["HomeTimelineService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"home-timeline-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"home-timeline-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"home-timeline-service-config","subPath":"service-config.json"}]}],"hostname":"home-timeline-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"home-timeline-service"},"name":"home-timeline-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:02Z"
    generation: 1
    labels:
      service: home-timeline-service
    name: home-timeline-service
    namespace: default
    resourceVersion: "169507"
    uid: fb4841b5-ce48-4bbb-a0fc-2206eade8509
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: home-timeline-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: home-timeline-service
          kubectl.kubernetes.io/default-logs-container: home-timeline-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: home-timeline-service
          security.istio.io/tlsMode: istio
          service: home-timeline-service
          service.istio.io/canonical-name: home-timeline-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - HomeTimelineService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: home-timeline-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: home-timeline-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: home-timeline-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: home-timeline-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: home-timeline-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: home-timeline-service
          name: home-timeline-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:10Z"
      lastUpdateTime: "2022-08-26T06:36:10Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:02Z"
      lastUpdateTime: "2022-08-26T06:36:10Z"
      message: ReplicaSet "home-timeline-service-99998d4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"jaeger"},"name":"jaeger","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"jaeger"}},"template":{"metadata":{"labels":{"app":"jaeger","service":"jaeger"}},"spec":{"containers":[{"env":[{"name":"COLLECTOR_ZIPKIN_HTTP_PORT","value":"9411"}],"image":"docker.io/jaegertracing/all-in-one:latest","imagePullPolicy":"IfNotPresent","name":"jaeger","ports":[{"containerPort":5775},{"containerPort":6831},{"containerPort":6832},{"containerPort":5778},{"containerPort":16686},{"containerPort":14268},{"containerPort":9411}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"jaeger-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"jaeger-config","subPath":"service-config.json"}]}],"hostname":"jaeger","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"jaeger"},"name":"jaeger-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:03Z"
    generation: 1
    labels:
      service: jaeger
    name: jaeger
    namespace: default
    resourceVersion: "170258"
    uid: ae56db16-d608-48c9-ae30-c2898df8c37d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: jaeger
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: jaeger
          kubectl.kubernetes.io/default-logs-container: jaeger
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: jaeger
          security.istio.io/tlsMode: istio
          service: jaeger
          service.istio.io/canonical-name: jaeger
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - env:
          - name: COLLECTOR_ZIPKIN_HTTP_PORT
            value: "9411"
          image: docker.io/jaegertracing/all-in-one:latest
          imagePullPolicy: IfNotPresent
          name: jaeger
          ports:
          - containerPort: 5775
            protocol: TCP
          - containerPort: 6831
            protocol: TCP
          - containerPort: 6832
            protocol: TCP
          - containerPort: 5778
            protocol: TCP
          - containerPort: 16686
            protocol: TCP
          - containerPort: 14268
            protocol: TCP
          - containerPort: 9411
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: jaeger-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: jaeger-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":5775,"protocol":"TCP"}
                  ,{"containerPort":6831,"protocol":"TCP"}
                  ,{"containerPort":6832,"protocol":"TCP"}
                  ,{"containerPort":5778,"protocol":"TCP"}
                  ,{"containerPort":16686,"protocol":"TCP"}
                  ,{"containerPort":14268,"protocol":"TCP"}
                  ,{"containerPort":9411,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: jaeger
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: jaeger
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: jaeger
          name: jaeger-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:37:11Z"
      lastUpdateTime: "2022-08-26T06:37:11Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:03Z"
      lastUpdateTime: "2022-08-26T06:37:11Z"
      message: ReplicaSet "jaeger-7954bc896d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"media-frontend"},"name":"media-frontend","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"media-frontend"}},"template":{"metadata":{"labels":{"app":"media-frontend","service":"media-frontend"}},"spec":{"containers":[{"env":[{"name":"fqdn_suffix","value":".default.svc.cluster.local"}],"image":"docker.io/yg397/media-frontend:xenial","imagePullPolicy":"IfNotPresent","name":"media-frontend","ports":[{"containerPort":8081}],"volumeMounts":[{"mountPath":"/usr/local/openresty/nginx/conf/nginx.conf","name":"media-frontend-config","subPath":"nginx.conf"},{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"media-frontend-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"media-frontend-config","subPath":"service-config.json"},{"mountPath":"/usr/local/openresty/nginx/lua-scripts","name":"lua-scripts"}]}],"hostname":"media-frontend","initContainers":[{"args":["-c","git clone https://github.com/delimitrou/DeathStarBench.git /DeathStarBench \u0026\u0026 cp -r /DeathStarBench/socialNetwork/media-frontend/lua-scripts/* /lua-scripts/"],"command":["/bin/sh"],"image":"docker.io/alpine/git:latest","imagePullPolicy":"IfNotPresent","name":"alpine-container","volumeMounts":[{"mountPath":"/lua-scripts","name":"lua-scripts"}]}],"restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"media-frontend"},"name":"media-frontend-config"},{"emptyDir":{},"name":"lua-scripts"}]}}}}
    creationTimestamp: "2022-08-26T06:36:04Z"
    generation: 1
    labels:
      service: media-frontend
    name: media-frontend
    namespace: default
    resourceVersion: "170324"
    uid: 75cff20b-66e2-4592-94ba-fe4c62db5e15
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: media-frontend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: media-frontend
          kubectl.kubernetes.io/default-logs-container: media-frontend
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: media-frontend
          security.istio.io/tlsMode: istio
          service: media-frontend
          service.istio.io/canonical-name: media-frontend
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - env:
          - name: fqdn_suffix
            value: .default.svc.cluster.local
          image: docker.io/yg397/media-frontend:xenial
          imagePullPolicy: IfNotPresent
          name: media-frontend
          ports:
          - containerPort: 8081
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/openresty/nginx/conf/nginx.conf
            name: media-frontend-config
            subPath: nginx.conf
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: media-frontend-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: media-frontend-config
            subPath: service-config.json
          - mountPath: /usr/local/openresty/nginx/lua-scripts
            name: lua-scripts
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":8081,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: media-frontend
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: media-frontend
        initContainers:
        - args:
          - -c
          - git clone https://github.com/delimitrou/DeathStarBench.git /DeathStarBench
            && cp -r /DeathStarBench/socialNetwork/media-frontend/lua-scripts/* /lua-scripts/
          command:
          - /bin/sh
          image: docker.io/alpine/git:latest
          imagePullPolicy: IfNotPresent
          name: alpine-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /lua-scripts
            name: lua-scripts
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: media-frontend
          name: media-frontend-config
        - emptyDir: {}
          name: lua-scripts
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:37:26Z"
      lastUpdateTime: "2022-08-26T06:37:26Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:04Z"
      lastUpdateTime: "2022-08-26T06:37:26Z"
      message: ReplicaSet "media-frontend-9d47796d7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"media-memcached"},"name":"media-memcached","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"media-memcached"}},"template":{"metadata":{"labels":{"app":"media-memcached","service":"media-memcached"}},"spec":{"containers":[{"image":"docker.io/library/memcached:1.6.7","imagePullPolicy":"IfNotPresent","name":"media-memcached","ports":[{"containerPort":11211}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"media-memcached-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"media-memcached-config","subPath":"service-config.json"}]}],"hostname":"media-memcached","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"media-memcached"},"name":"media-memcached-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:05Z"
    generation: 1
    labels:
      service: media-memcached
    name: media-memcached
    namespace: default
    resourceVersion: "169619"
    uid: d8ee6476-a764-47ec-a092-fdbe49204f9c
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: media-memcached
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: media-memcached
          kubectl.kubernetes.io/default-logs-container: media-memcached
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: media-memcached
          security.istio.io/tlsMode: istio
          service: media-memcached
          service.istio.io/canonical-name: media-memcached
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - image: docker.io/library/memcached:1.6.7
          imagePullPolicy: IfNotPresent
          name: media-memcached
          ports:
          - containerPort: 11211
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: media-memcached-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: media-memcached-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":11211,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: media-memcached
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: media-memcached
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: media-memcached
          name: media-memcached-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:17Z"
      lastUpdateTime: "2022-08-26T06:36:17Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:05Z"
      lastUpdateTime: "2022-08-26T06:36:17Z"
      message: ReplicaSet "media-memcached-6dfbcdc6f5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"media-mongodb"},"name":"media-mongodb","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"media-mongodb"}},"template":{"metadata":{"labels":{"app":"media-mongodb","service":"media-mongodb"}},"spec":{"containers":[{"args":["--config","/social-network-microservices/config/mongod.conf"],"image":"docker.io/library/mongo:4.4.6","imagePullPolicy":"IfNotPresent","name":"media-mongodb","ports":[{"containerPort":27017}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/mongod.conf","name":"media-mongodb-config","subPath":"mongod.conf"}]}],"hostname":"media-mongodb","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"media-mongodb"},"name":"media-mongodb-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:07Z"
    generation: 1
    labels:
      service: media-mongodb
    name: media-mongodb
    namespace: default
    resourceVersion: "169664"
    uid: 55938edf-52e7-451d-89d6-1748b4e98ff5
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: media-mongodb
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: media-mongodb
          kubectl.kubernetes.io/default-logs-container: media-mongodb
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: media-mongodb
          security.istio.io/tlsMode: istio
          service: media-mongodb
          service.istio.io/canonical-name: media-mongodb
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - args:
          - --config
          - /social-network-microservices/config/mongod.conf
          image: docker.io/library/mongo:4.4.6
          imagePullPolicy: IfNotPresent
          name: media-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/mongod.conf
            name: media-mongodb-config
            subPath: mongod.conf
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":27017,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: media-mongodb
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: media-mongodb
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: media-mongodb
          name: media-mongodb-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:19Z"
      lastUpdateTime: "2022-08-26T06:36:19Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:07Z"
      lastUpdateTime: "2022-08-26T06:36:19Z"
      message: ReplicaSet "media-mongodb-6d8446985b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"media-service"},"name":"media-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"media-service"}},"template":{"metadata":{"labels":{"app":"media-service","service":"media-service"}},"spec":{"containers":[{"command":["MediaService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"media-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"media-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"media-service-config","subPath":"service-config.json"}]}],"hostname":"media-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"media-service"},"name":"media-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:10Z"
    generation: 1
    labels:
      service: media-service
    name: media-service
    namespace: default
    resourceVersion: "169725"
    uid: c6c5c0c3-3f78-4565-9213-634f9bfabe90
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: media-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: media-service
          kubectl.kubernetes.io/default-logs-container: media-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: media-service
          security.istio.io/tlsMode: istio
          service: media-service
          service.istio.io/canonical-name: media-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - MediaService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: media-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: media-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: media-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: media-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: media-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: media-service
          name: media-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:25Z"
      lastUpdateTime: "2022-08-26T06:36:25Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:10Z"
      lastUpdateTime: "2022-08-26T06:36:25Z"
      message: ReplicaSet "media-service-b7f9488fb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"nginx-thrift"},"name":"nginx-thrift","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"nginx-thrift"}},"template":{"metadata":{"labels":{"app":"nginx-thrift","service":"nginx-thrift"}},"spec":{"containers":[{"env":[{"name":"fqdn_suffix","value":".default.svc.cluster.local"}],"image":"docker.io/yg397/openresty-thrift:xenial","imagePullPolicy":"IfNotPresent","name":"nginx-thrift","ports":[{"containerPort":8080}],"volumeMounts":[{"mountPath":"/usr/local/openresty/nginx/jaeger-config.json","name":"nginx-thrift-config","subPath":"jaeger-config.json"},{"mountPath":"/usr/local/openresty/nginx/conf/nginx.conf","name":"nginx-thrift-config","subPath":"nginx.conf"},{"mountPath":"/usr/local/openresty/nginx/lua-scripts","name":"lua-scripts"},{"mountPath":"/usr/local/openresty/lualib/thrift","name":"lua-thrift"},{"mountPath":"/usr/local/openresty/nginx/pages","name":"pages"},{"mountPath":"/gen-lua","name":"gen-lua"},{"mountPath":"/keys","name":"keys"}]}],"hostname":"nginx-thrift","initContainers":[{"args":["-c","git clone https://github.com/delimitrou/DeathStarBench.git /DeathStarBench \u0026\u0026 cp -r /DeathStarBench/socialNetwork/gen-lua/* /gen-lua/ \u0026\u0026 cp -r /DeathStarBench/socialNetwork/docker/openresty-thrift/lua-thrift/* /lua-thrift/ \u0026\u0026 cp -r /DeathStarBench/socialNetwork/nginx-web-server/lua-scripts/* /lua-scripts/ \u0026\u0026 cp -r /DeathStarBench/socialNetwork/nginx-web-server/pages/* /pages/ \u0026\u0026 cp /DeathStarBench/socialNetwork/keys/* /keys/"],"command":["/bin/sh"],"image":"docker.io/alpine/git:latest","imagePullPolicy":"IfNotPresent","name":"alpine-container","volumeMounts":[{"mountPath":"/lua-scripts","name":"lua-scripts"},{"mountPath":"/lua-thrift","name":"lua-thrift"},{"mountPath":"/pages","name":"pages"},{"mountPath":"/gen-lua","name":"gen-lua"},{"mountPath":"/keys","name":"keys"}]}],"restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"nginx-thrift"},"name":"nginx-thrift-config"},{"emptyDir":{},"name":"lua-scripts"},{"emptyDir":{},"name":"pages"},{"emptyDir":{},"name":"gen-lua"},{"emptyDir":{},"name":"lua-thrift"},{"emptyDir":{},"name":"keys"}]}}}}
    creationTimestamp: "2022-08-26T06:36:11Z"
    generation: 1
    labels:
      service: nginx-thrift
    name: nginx-thrift
    namespace: default
    resourceVersion: "170472"
    uid: 88836f19-efa6-46c7-bad6-16e45c6833bb
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: nginx-thrift
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: nginx-thrift
          kubectl.kubernetes.io/default-logs-container: nginx-thrift
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: nginx-thrift
          security.istio.io/tlsMode: istio
          service: nginx-thrift
          service.istio.io/canonical-name: nginx-thrift
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - env:
          - name: fqdn_suffix
            value: .default.svc.cluster.local
          image: docker.io/yg397/openresty-thrift:xenial
          imagePullPolicy: IfNotPresent
          name: nginx-thrift
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/openresty/nginx/jaeger-config.json
            name: nginx-thrift-config
            subPath: jaeger-config.json
          - mountPath: /usr/local/openresty/nginx/conf/nginx.conf
            name: nginx-thrift-config
            subPath: nginx.conf
          - mountPath: /usr/local/openresty/nginx/lua-scripts
            name: lua-scripts
          - mountPath: /usr/local/openresty/lualib/thrift
            name: lua-thrift
          - mountPath: /usr/local/openresty/nginx/pages
            name: pages
          - mountPath: /gen-lua
            name: gen-lua
          - mountPath: /keys
            name: keys
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":8080,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: nginx-thrift
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: nginx-thrift
        initContainers:
        - args:
          - -c
          - git clone https://github.com/delimitrou/DeathStarBench.git /DeathStarBench
            && cp -r /DeathStarBench/socialNetwork/gen-lua/* /gen-lua/ && cp -r /DeathStarBench/socialNetwork/docker/openresty-thrift/lua-thrift/*
            /lua-thrift/ && cp -r /DeathStarBench/socialNetwork/nginx-web-server/lua-scripts/*
            /lua-scripts/ && cp -r /DeathStarBench/socialNetwork/nginx-web-server/pages/*
            /pages/ && cp /DeathStarBench/socialNetwork/keys/* /keys/
          command:
          - /bin/sh
          image: docker.io/alpine/git:latest
          imagePullPolicy: IfNotPresent
          name: alpine-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /lua-scripts
            name: lua-scripts
          - mountPath: /lua-thrift
            name: lua-thrift
          - mountPath: /pages
            name: pages
          - mountPath: /gen-lua
            name: gen-lua
          - mountPath: /keys
            name: keys
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: nginx-thrift
          name: nginx-thrift-config
        - emptyDir: {}
          name: lua-scripts
        - emptyDir: {}
          name: pages
        - emptyDir: {}
          name: gen-lua
        - emptyDir: {}
          name: lua-thrift
        - emptyDir: {}
          name: keys
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:38:13Z"
      lastUpdateTime: "2022-08-26T06:38:13Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:11Z"
      lastUpdateTime: "2022-08-26T06:38:13Z"
      message: ReplicaSet "nginx-thrift-6d9c6c9b66" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"post-storage-memcached"},"name":"post-storage-memcached","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"post-storage-memcached"}},"template":{"metadata":{"labels":{"app":"post-storage-memcached","service":"post-storage-memcached"}},"spec":{"containers":[{"image":"docker.io/library/memcached:1.6.7","imagePullPolicy":"IfNotPresent","name":"post-storage-memcached","ports":[{"containerPort":11211}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"post-storage-memcached-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"post-storage-memcached-config","subPath":"service-config.json"}]}],"hostname":"post-storage-memcached","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"post-storage-memcached"},"name":"post-storage-memcached-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:13Z"
    generation: 1
    labels:
      service: post-storage-memcached
    name: post-storage-memcached
    namespace: default
    resourceVersion: "169809"
    uid: b52a0b75-2fb0-4add-9216-d7de5e37d495
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: post-storage-memcached
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: post-storage-memcached
          kubectl.kubernetes.io/default-logs-container: post-storage-memcached
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: post-storage-memcached
          security.istio.io/tlsMode: istio
          service: post-storage-memcached
          service.istio.io/canonical-name: post-storage-memcached
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - image: docker.io/library/memcached:1.6.7
          imagePullPolicy: IfNotPresent
          name: post-storage-memcached
          ports:
          - containerPort: 11211
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: post-storage-memcached-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: post-storage-memcached-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":11211,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: post-storage-memcached
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: post-storage-memcached
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: post-storage-memcached
          name: post-storage-memcached-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:30Z"
      lastUpdateTime: "2022-08-26T06:36:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:14Z"
      lastUpdateTime: "2022-08-26T06:36:30Z"
      message: ReplicaSet "post-storage-memcached-6c4676588f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"post-storage-mongodb"},"name":"post-storage-mongodb","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"post-storage-mongodb"}},"template":{"metadata":{"labels":{"app":"post-storage-mongodb","service":"post-storage-mongodb"}},"spec":{"containers":[{"args":["--config","/social-network-microservices/config/mongod.conf"],"image":"docker.io/library/mongo:4.4.6","imagePullPolicy":"IfNotPresent","name":"post-storage-mongodb","ports":[{"containerPort":27017}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/mongod.conf","name":"post-storage-mongodb-config","subPath":"mongod.conf"}]}],"hostname":"post-storage-mongodb","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"post-storage-mongodb"},"name":"post-storage-mongodb-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:16Z"
    generation: 1
    labels:
      service: post-storage-mongodb
    name: post-storage-mongodb
    namespace: default
    resourceVersion: "169875"
    uid: ff157931-ba66-48ef-b273-d29c3ba3938f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: post-storage-mongodb
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: post-storage-mongodb
          kubectl.kubernetes.io/default-logs-container: post-storage-mongodb
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: post-storage-mongodb
          security.istio.io/tlsMode: istio
          service: post-storage-mongodb
          service.istio.io/canonical-name: post-storage-mongodb
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - args:
          - --config
          - /social-network-microservices/config/mongod.conf
          image: docker.io/library/mongo:4.4.6
          imagePullPolicy: IfNotPresent
          name: post-storage-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/mongod.conf
            name: post-storage-mongodb-config
            subPath: mongod.conf
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":27017,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: post-storage-mongodb
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: post-storage-mongodb
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: post-storage-mongodb
          name: post-storage-mongodb-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:36Z"
      lastUpdateTime: "2022-08-26T06:36:36Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:16Z"
      lastUpdateTime: "2022-08-26T06:36:36Z"
      message: ReplicaSet "post-storage-mongodb-7c74fbdf94" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"post-storage-service"},"name":"post-storage-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"post-storage-service"}},"template":{"metadata":{"labels":{"app":"post-storage-service","service":"post-storage-service"}},"spec":{"containers":[{"command":["PostStorageService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"post-storage-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"post-storage-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"post-storage-service-config","subPath":"service-config.json"}]}],"hostname":"post-storage-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"post-storage-service"},"name":"post-storage-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:17Z"
    generation: 1
    labels:
      service: post-storage-service
    name: post-storage-service
    namespace: default
    resourceVersion: "169894"
    uid: 98bf44f0-27c1-4047-b3ad-7501482c1944
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: post-storage-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: post-storage-service
          kubectl.kubernetes.io/default-logs-container: post-storage-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: post-storage-service
          security.istio.io/tlsMode: istio
          service: post-storage-service
          service.istio.io/canonical-name: post-storage-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - PostStorageService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: post-storage-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: post-storage-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: post-storage-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: post-storage-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: post-storage-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: post-storage-service
          name: post-storage-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:37Z"
      lastUpdateTime: "2022-08-26T06:36:37Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:18Z"
      lastUpdateTime: "2022-08-26T06:36:37Z"
      message: ReplicaSet "post-storage-service-97ddc5ff5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"social-graph-mongodb"},"name":"social-graph-mongodb","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"social-graph-mongodb"}},"template":{"metadata":{"labels":{"app":"social-graph-mongodb","service":"social-graph-mongodb"}},"spec":{"containers":[{"args":["--config","/social-network-microservices/config/mongod.conf"],"image":"docker.io/library/mongo:4.4.6","imagePullPolicy":"IfNotPresent","name":"social-graph-mongodb","ports":[{"containerPort":27017}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/mongod.conf","name":"social-graph-mongodb-config","subPath":"mongod.conf"}]}],"hostname":"social-graph-mongodb","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"social-graph-mongodb"},"name":"social-graph-mongodb-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:19Z"
    generation: 1
    labels:
      service: social-graph-mongodb
    name: social-graph-mongodb
    namespace: default
    resourceVersion: "169988"
    uid: aa2a48f0-3bfc-41b2-bccc-99d7a0ba58d6
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: social-graph-mongodb
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: social-graph-mongodb
          kubectl.kubernetes.io/default-logs-container: social-graph-mongodb
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: social-graph-mongodb
          security.istio.io/tlsMode: istio
          service: social-graph-mongodb
          service.istio.io/canonical-name: social-graph-mongodb
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - args:
          - --config
          - /social-network-microservices/config/mongod.conf
          image: docker.io/library/mongo:4.4.6
          imagePullPolicy: IfNotPresent
          name: social-graph-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/mongod.conf
            name: social-graph-mongodb-config
            subPath: mongod.conf
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":27017,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: social-graph-mongodb
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: social-graph-mongodb
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: social-graph-mongodb
          name: social-graph-mongodb-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:45Z"
      lastUpdateTime: "2022-08-26T06:36:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:20Z"
      lastUpdateTime: "2022-08-26T06:36:45Z"
      message: ReplicaSet "social-graph-mongodb-6597c8fcf4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"social-graph-redis"},"name":"social-graph-redis","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"social-graph-redis"}},"template":{"metadata":{"labels":{"app":"social-graph-redis","service":"social-graph-redis"}},"spec":{"containers":[{"args":["/social-network-microservices/config/redis.conf"],"image":"docker.io/library/redis:6.2.4","imagePullPolicy":"IfNotPresent","name":"social-graph-redis","ports":[{"containerPort":6379}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/redis.conf","name":"social-graph-redis-config","subPath":"redis.conf"}]}],"hostname":"social-graph-redis","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"social-graph-redis"},"name":"social-graph-redis-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:22Z"
    generation: 1
    labels:
      service: social-graph-redis
    name: social-graph-redis
    namespace: default
    resourceVersion: "169982"
    uid: 5dc39bb8-6b63-4b91-ab95-6bf1f63fead6
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: social-graph-redis
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: social-graph-redis
          kubectl.kubernetes.io/default-logs-container: social-graph-redis
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: social-graph-redis
          security.istio.io/tlsMode: istio
          service: social-graph-redis
          service.istio.io/canonical-name: social-graph-redis
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - args:
          - /social-network-microservices/config/redis.conf
          image: docker.io/library/redis:6.2.4
          imagePullPolicy: IfNotPresent
          name: social-graph-redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/redis.conf
            name: social-graph-redis-config
            subPath: redis.conf
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":6379,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: social-graph-redis
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: social-graph-redis
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: social-graph-redis
          name: social-graph-redis-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:45Z"
      lastUpdateTime: "2022-08-26T06:36:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:22Z"
      lastUpdateTime: "2022-08-26T06:36:45Z"
      message: ReplicaSet "social-graph-redis-6776fc6fc9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"social-graph-service"},"name":"social-graph-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"social-graph-service"}},"template":{"metadata":{"labels":{"app":"social-graph-service","service":"social-graph-service"}},"spec":{"containers":[{"command":["SocialGraphService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"social-graph-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"social-graph-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"social-graph-service-config","subPath":"service-config.json"}]}],"hostname":"social-graph-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"social-graph-service"},"name":"social-graph-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:25Z"
    generation: 1
    labels:
      service: social-graph-service
    name: social-graph-service
    namespace: default
    resourceVersion: "170015"
    uid: e762cda9-f59c-43dc-9b43-7485dc7ea7b2
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: social-graph-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: social-graph-service
          kubectl.kubernetes.io/default-logs-container: social-graph-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: social-graph-service
          security.istio.io/tlsMode: istio
          service: social-graph-service
          service.istio.io/canonical-name: social-graph-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - SocialGraphService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: social-graph-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: social-graph-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: social-graph-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: social-graph-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: social-graph-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: social-graph-service
          name: social-graph-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:47Z"
      lastUpdateTime: "2022-08-26T06:36:47Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:25Z"
      lastUpdateTime: "2022-08-26T06:36:47Z"
      message: ReplicaSet "social-graph-service-5b6564967c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"text-service"},"name":"text-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"text-service"}},"template":{"metadata":{"labels":{"app":"text-service","service":"text-service"}},"spec":{"containers":[{"command":["TextService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"text-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"text-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"text-service-config","subPath":"service-config.json"}]}],"hostname":"text-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"text-service"},"name":"text-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:27Z"
    generation: 1
    labels:
      service: text-service
    name: text-service
    namespace: default
    resourceVersion: "170107"
    uid: 8f1ed228-e106-42a5-a736-8ff4b1145fb0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: text-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: text-service
          kubectl.kubernetes.io/default-logs-container: text-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: text-service
          security.istio.io/tlsMode: istio
          service: text-service
          service.istio.io/canonical-name: text-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - TextService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: text-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: text-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: text-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: text-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: text-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: text-service
          name: text-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:53Z"
      lastUpdateTime: "2022-08-26T06:36:53Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:27Z"
      lastUpdateTime: "2022-08-26T06:36:53Z"
      message: ReplicaSet "text-service-6d8dd6d6c5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"unique-id-service"},"name":"unique-id-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"unique-id-service"}},"template":{"metadata":{"labels":{"app":"unique-id-service","service":"unique-id-service"}},"spec":{"containers":[{"command":["UniqueIdService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"unique-id-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"unique-id-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"unique-id-service-config","subPath":"service-config.json"}]}],"hostname":"unique-id-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"unique-id-service"},"name":"unique-id-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:28Z"
    generation: 1
    labels:
      service: unique-id-service
    name: unique-id-service
    namespace: default
    resourceVersion: "170029"
    uid: 211a2ab7-2e95-43c9-82fc-c158a21e7432
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: unique-id-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: unique-id-service
          kubectl.kubernetes.io/default-logs-container: unique-id-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: unique-id-service
          security.istio.io/tlsMode: istio
          service: unique-id-service
          service.istio.io/canonical-name: unique-id-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - UniqueIdService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: unique-id-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: unique-id-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: unique-id-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: unique-id-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: unique-id-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: unique-id-service
          name: unique-id-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:49Z"
      lastUpdateTime: "2022-08-26T06:36:49Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:29Z"
      lastUpdateTime: "2022-08-26T06:36:49Z"
      message: ReplicaSet "unique-id-service-748f77ddbb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"url-shorten-memcached"},"name":"url-shorten-memcached","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"url-shorten-memcached"}},"template":{"metadata":{"labels":{"app":"url-shorten-memcached","service":"url-shorten-memcached"}},"spec":{"containers":[{"image":"docker.io/library/memcached:1.6.7","imagePullPolicy":"IfNotPresent","name":"url-shorten-memcached","ports":[{"containerPort":11211}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"url-shorten-memcached-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"url-shorten-memcached-config","subPath":"service-config.json"}]}],"hostname":"url-shorten-memcached","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"url-shorten-memcached"},"name":"url-shorten-memcached-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:32Z"
    generation: 1
    labels:
      service: url-shorten-memcached
    name: url-shorten-memcached
    namespace: default
    resourceVersion: "170065"
    uid: a9380740-7248-4cf3-bb22-e7f9ea297c6e
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: url-shorten-memcached
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: url-shorten-memcached
          kubectl.kubernetes.io/default-logs-container: url-shorten-memcached
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: url-shorten-memcached
          security.istio.io/tlsMode: istio
          service: url-shorten-memcached
          service.istio.io/canonical-name: url-shorten-memcached
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - image: docker.io/library/memcached:1.6.7
          imagePullPolicy: IfNotPresent
          name: url-shorten-memcached
          ports:
          - containerPort: 11211
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: url-shorten-memcached-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: url-shorten-memcached-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":11211,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: url-shorten-memcached
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: url-shorten-memcached
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: url-shorten-memcached
          name: url-shorten-memcached-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:51Z"
      lastUpdateTime: "2022-08-26T06:36:51Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:33Z"
      lastUpdateTime: "2022-08-26T06:36:51Z"
      message: ReplicaSet "url-shorten-memcached-6ddc954cf7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"url-shorten-mongodb"},"name":"url-shorten-mongodb","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"url-shorten-mongodb"}},"template":{"metadata":{"labels":{"app":"url-shorten-mongodb","service":"url-shorten-mongodb"}},"spec":{"containers":[{"args":["--config","/social-network-microservices/config/mongod.conf"],"image":"docker.io/library/mongo:4.4.6","imagePullPolicy":"IfNotPresent","name":"url-shorten-mongodb","ports":[{"containerPort":27017}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/mongod.conf","name":"url-shorten-mongodb-config","subPath":"mongod.conf"}]}],"hostname":"url-shorten-mongodb","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"url-shorten-mongodb"},"name":"url-shorten-mongodb-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:34Z"
    generation: 1
    labels:
      service: url-shorten-mongodb
    name: url-shorten-mongodb
    namespace: default
    resourceVersion: "170104"
    uid: c4007222-5648-46c9-9d76-8e4218e391d3
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: url-shorten-mongodb
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: url-shorten-mongodb
          kubectl.kubernetes.io/default-logs-container: url-shorten-mongodb
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: url-shorten-mongodb
          security.istio.io/tlsMode: istio
          service: url-shorten-mongodb
          service.istio.io/canonical-name: url-shorten-mongodb
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - args:
          - --config
          - /social-network-microservices/config/mongod.conf
          image: docker.io/library/mongo:4.4.6
          imagePullPolicy: IfNotPresent
          name: url-shorten-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/mongod.conf
            name: url-shorten-mongodb-config
            subPath: mongod.conf
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":27017,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: url-shorten-mongodb
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: url-shorten-mongodb
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: url-shorten-mongodb
          name: url-shorten-mongodb-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:53Z"
      lastUpdateTime: "2022-08-26T06:36:53Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:34Z"
      lastUpdateTime: "2022-08-26T06:36:53Z"
      message: ReplicaSet "url-shorten-mongodb-5d59c4498c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"url-shorten-service"},"name":"url-shorten-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"url-shorten-service"}},"template":{"metadata":{"labels":{"app":"url-shorten-service","service":"url-shorten-service"}},"spec":{"containers":[{"command":["UrlShortenService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"url-shorten-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"url-shorten-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"url-shorten-service-config","subPath":"service-config.json"}]}],"hostname":"url-shorten-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"url-shorten-service"},"name":"url-shorten-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:37Z"
    generation: 1
    labels:
      service: url-shorten-service
    name: url-shorten-service
    namespace: default
    resourceVersion: "170182"
    uid: 9fb3adb1-e0aa-4589-819d-9e3a57a6013a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: url-shorten-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: url-shorten-service
          kubectl.kubernetes.io/default-logs-container: url-shorten-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: url-shorten-service
          security.istio.io/tlsMode: istio
          service: url-shorten-service
          service.istio.io/canonical-name: url-shorten-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - UrlShortenService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: url-shorten-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: url-shorten-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: url-shorten-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: url-shorten-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: url-shorten-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: url-shorten-service
          name: url-shorten-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:37:01Z"
      lastUpdateTime: "2022-08-26T06:37:01Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:37Z"
      lastUpdateTime: "2022-08-26T06:37:01Z"
      message: ReplicaSet "url-shorten-service-54bb774f74" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"user-memcached"},"name":"user-memcached","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"user-memcached"}},"template":{"metadata":{"labels":{"app":"user-memcached","service":"user-memcached"}},"spec":{"containers":[{"image":"docker.io/library/memcached:1.6.7","imagePullPolicy":"IfNotPresent","name":"user-memcached","ports":[{"containerPort":11211}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"user-memcached-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"user-memcached-config","subPath":"service-config.json"}]}],"hostname":"user-memcached","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"user-memcached"},"name":"user-memcached-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:40Z"
    generation: 1
    labels:
      service: user-memcached
    name: user-memcached
    namespace: default
    resourceVersion: "170219"
    uid: c7ddb433-ff6a-4ab8-91b3-e63233933b1b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: user-memcached
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: user-memcached
          kubectl.kubernetes.io/default-logs-container: user-memcached
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: user-memcached
          security.istio.io/tlsMode: istio
          service: user-memcached
          service.istio.io/canonical-name: user-memcached
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - image: docker.io/library/memcached:1.6.7
          imagePullPolicy: IfNotPresent
          name: user-memcached
          ports:
          - containerPort: 11211
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: user-memcached-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: user-memcached-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":11211,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: user-memcached
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: user-memcached
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: user-memcached
          name: user-memcached-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:37:06Z"
      lastUpdateTime: "2022-08-26T06:37:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:40Z"
      lastUpdateTime: "2022-08-26T06:37:06Z"
      message: ReplicaSet "user-memcached-78c877b4cf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"user-mention-service"},"name":"user-mention-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"user-mention-service"}},"template":{"metadata":{"labels":{"app":"user-mention-service","service":"user-mention-service"}},"spec":{"containers":[{"command":["UserMentionService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"user-mention-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"user-mention-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"user-mention-service-config","subPath":"service-config.json"}]}],"hostname":"user-mention-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"user-mention-service"},"name":"user-mention-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:42Z"
    generation: 1
    labels:
      service: user-mention-service
    name: user-mention-service
    namespace: default
    resourceVersion: "170158"
    uid: f9eaa133-c531-484f-bead-ac9b50919b28
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: user-mention-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: user-mention-service
          kubectl.kubernetes.io/default-logs-container: user-mention-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: user-mention-service
          security.istio.io/tlsMode: istio
          service: user-mention-service
          service.istio.io/canonical-name: user-mention-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - UserMentionService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: user-mention-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: user-mention-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: user-mention-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: user-mention-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: user-mention-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: user-mention-service
          name: user-mention-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:36:59Z"
      lastUpdateTime: "2022-08-26T06:36:59Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:43Z"
      lastUpdateTime: "2022-08-26T06:36:59Z"
      message: ReplicaSet "user-mention-service-5777f6dfdc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"user-mongodb"},"name":"user-mongodb","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"user-mongodb"}},"template":{"metadata":{"labels":{"app":"user-mongodb","service":"user-mongodb"}},"spec":{"containers":[{"args":["--config","/social-network-microservices/config/mongod.conf"],"image":"docker.io/library/mongo:4.4.6","imagePullPolicy":"IfNotPresent","name":"user-mongodb","ports":[{"containerPort":27017}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/mongod.conf","name":"user-mongodb-config","subPath":"mongod.conf"}]}],"hostname":"user-mongodb","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"user-mongodb"},"name":"user-mongodb-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:45Z"
    generation: 1
    labels:
      service: user-mongodb
    name: user-mongodb
    namespace: default
    resourceVersion: "170268"
    uid: dee34ac7-637b-4f1f-8d12-978105847f00
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: user-mongodb
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: user-mongodb
          kubectl.kubernetes.io/default-logs-container: user-mongodb
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: user-mongodb
          security.istio.io/tlsMode: istio
          service: user-mongodb
          service.istio.io/canonical-name: user-mongodb
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - args:
          - --config
          - /social-network-microservices/config/mongod.conf
          image: docker.io/library/mongo:4.4.6
          imagePullPolicy: IfNotPresent
          name: user-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/mongod.conf
            name: user-mongodb-config
            subPath: mongod.conf
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":27017,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: user-mongodb
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: user-mongodb
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: user-mongodb
          name: user-mongodb-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:37:12Z"
      lastUpdateTime: "2022-08-26T06:37:12Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:46Z"
      lastUpdateTime: "2022-08-26T06:37:12Z"
      message: ReplicaSet "user-mongodb-f4fd8b4b7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"user-service"},"name":"user-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"user-service"}},"template":{"metadata":{"labels":{"app":"user-service","service":"user-service"}},"spec":{"containers":[{"command":["UserService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"user-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"user-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"user-service-config","subPath":"service-config.json"}]}],"hostname":"user-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"user-service"},"name":"user-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:49Z"
    generation: 1
    labels:
      service: user-service
    name: user-service
    namespace: default
    resourceVersion: "170217"
    uid: e9fe9b73-8d3c-4478-aa36-86f9cc062061
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: user-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: user-service
          kubectl.kubernetes.io/default-logs-container: user-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: user-service
          security.istio.io/tlsMode: istio
          service: user-service
          service.istio.io/canonical-name: user-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - UserService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: user-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: user-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: user-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: user-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: user-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: user-service
          name: user-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:37:06Z"
      lastUpdateTime: "2022-08-26T06:37:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:50Z"
      lastUpdateTime: "2022-08-26T06:37:06Z"
      message: ReplicaSet "user-service-7c68bf5bbc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"user-timeline-mongodb"},"name":"user-timeline-mongodb","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"user-timeline-mongodb"}},"template":{"metadata":{"labels":{"app":"user-timeline-mongodb","service":"user-timeline-mongodb"}},"spec":{"containers":[{"args":["--config","/social-network-microservices/config/mongod.conf"],"image":"docker.io/library/mongo:4.4.6","imagePullPolicy":"IfNotPresent","name":"user-timeline-mongodb","ports":[{"containerPort":27017}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/mongod.conf","name":"user-timeline-mongodb-config","subPath":"mongod.conf"}]}],"hostname":"user-timeline-mongodb","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"user-timeline-mongodb"},"name":"user-timeline-mongodb-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:51Z"
    generation: 1
    labels:
      service: user-timeline-mongodb
    name: user-timeline-mongodb
    namespace: default
    resourceVersion: "170244"
    uid: f17a3ada-4245-42b0-909a-1d933f8637d8
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: user-timeline-mongodb
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: user-timeline-mongodb
          kubectl.kubernetes.io/default-logs-container: user-timeline-mongodb
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: user-timeline-mongodb
          security.istio.io/tlsMode: istio
          service: user-timeline-mongodb
          service.istio.io/canonical-name: user-timeline-mongodb
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - args:
          - --config
          - /social-network-microservices/config/mongod.conf
          image: docker.io/library/mongo:4.4.6
          imagePullPolicy: IfNotPresent
          name: user-timeline-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/mongod.conf
            name: user-timeline-mongodb-config
            subPath: mongod.conf
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":27017,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: user-timeline-mongodb
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: user-timeline-mongodb
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: user-timeline-mongodb
          name: user-timeline-mongodb-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:37:09Z"
      lastUpdateTime: "2022-08-26T06:37:09Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:52Z"
      lastUpdateTime: "2022-08-26T06:37:09Z"
      message: ReplicaSet "user-timeline-mongodb-6f754b4dd7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"user-timeline-redis"},"name":"user-timeline-redis","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"user-timeline-redis"}},"template":{"metadata":{"labels":{"app":"user-timeline-redis","service":"user-timeline-redis"}},"spec":{"containers":[{"args":["/social-network-microservices/config/redis.conf"],"image":"docker.io/library/redis:6.2.4","imagePullPolicy":"IfNotPresent","name":"user-timeline-redis","ports":[{"containerPort":6379}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/redis.conf","name":"user-timeline-redis-config","subPath":"redis.conf"}]}],"hostname":"user-timeline-redis","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"user-timeline-redis"},"name":"user-timeline-redis-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:54Z"
    generation: 1
    labels:
      service: user-timeline-redis
    name: user-timeline-redis
    namespace: default
    resourceVersion: "170276"
    uid: ff1d02ff-dd75-4354-b880-6ead231928c8
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: user-timeline-redis
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: user-timeline-redis
          kubectl.kubernetes.io/default-logs-container: user-timeline-redis
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: user-timeline-redis
          security.istio.io/tlsMode: istio
          service: user-timeline-redis
          service.istio.io/canonical-name: user-timeline-redis
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - args:
          - /social-network-microservices/config/redis.conf
          image: docker.io/library/redis:6.2.4
          imagePullPolicy: IfNotPresent
          name: user-timeline-redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/redis.conf
            name: user-timeline-redis-config
            subPath: redis.conf
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":6379,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: user-timeline-redis
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: user-timeline-redis
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: user-timeline-redis
          name: user-timeline-redis-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:37:13Z"
      lastUpdateTime: "2022-08-26T06:37:13Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:55Z"
      lastUpdateTime: "2022-08-26T06:37:13Z"
      message: ReplicaSet "user-timeline-redis-5b89c97cb6" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"service":"user-timeline-service"},"name":"user-timeline-service","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"user-timeline-service"}},"template":{"metadata":{"labels":{"app":"user-timeline-service","service":"user-timeline-service"}},"spec":{"containers":[{"command":["UserTimelineService"],"image":"docker.io/yg397/social-network-microservices:latest","imagePullPolicy":"IfNotPresent","name":"user-timeline-service","ports":[{"containerPort":9090}],"volumeMounts":[{"mountPath":"/social-network-microservices/config/jaeger-config.yml","name":"user-timeline-service-config","subPath":"jaeger-config.yml"},{"mountPath":"/social-network-microservices/config/service-config.json","name":"user-timeline-service-config","subPath":"service-config.json"}]}],"hostname":"user-timeline-service","restartPolicy":"Always","shareProcessNamespace":true,"volumes":[{"configMap":{"name":"user-timeline-service"},"name":"user-timeline-service-config"}]}}}}
    creationTimestamp: "2022-08-26T06:36:58Z"
    generation: 1
    labels:
      service: user-timeline-service
    name: user-timeline-service
    namespace: default
    resourceVersion: "170235"
    uid: 54af5c9a-4a1e-4d33-beca-7955e48fa199
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: user-timeline-service
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: user-timeline-service
          kubectl.kubernetes.io/default-logs-container: user-timeline-service
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/status: '{"initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["workload-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istio-token","istiod-ca-cert"],"imagePullSecrets":null,"revision":"default"}'
        creationTimestamp: null
        labels:
          app: user-timeline-service
          security.istio.io/tlsMode: istio
          service: user-timeline-service
          service.istio.io/canonical-name: user-timeline-service
          service.istio.io/canonical-revision: latest
      spec:
        containers:
        - command:
          - UserTimelineService
          image: docker.io/yg397/social-network-microservices:latest
          imagePullPolicy: IfNotPresent
          name: user-timeline-service
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /social-network-microservices/config/jaeger-config.yml
            name: user-timeline-service-config
            subPath: jaeger-config.yml
          - mountPath: /social-network-microservices/config/service-config.json
            name: user-timeline-service-config
            subPath: service-config.json
        - args:
          - proxy
          - sidecar
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --concurrency
          - "2"
          env:
          - name: JWT_POLICY
            value: third-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: PROXY_CONFIG
            value: |
              {}
          - name: ISTIO_META_POD_PORTS
            value: |-
              [
                  {"containerPort":9090,"protocol":"TCP"}
              ]
          - name: ISTIO_META_APP_CONTAINERS
            value: user-timeline-service
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          - name: ISTIO_META_INTERCEPTION_MODE
            value: REDIRECT
          - name: ISTIO_META_MESH_ID
            value: cluster.local
          - name: TRUST_DOMAIN
            value: cluster.local
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-proxy
          ports:
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          volumeMounts:
          - mountPath: /var/run/secrets/workload-spiffe-uds
            name: workload-socket
          - mountPath: /var/run/secrets/workload-spiffe-credentials
            name: workload-certs
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /var/run/secrets/tokens
            name: istio-token
          - mountPath: /etc/istio/pod
            name: istio-podinfo
        dnsPolicy: ClusterFirst
        hostname: user-timeline-service
        initContainers:
        - args:
          - istio-iptables
          - -p
          - "15001"
          - -z
          - "15006"
          - -u
          - "1337"
          - -m
          - REDIRECT
          - -i
          - '*'
          - -x
          - ""
          - -b
          - '*'
          - -d
          - 15090,15021,15020
          image: docker.io/istio/proxyv2:1.14.3
          name: istio-init
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        volumes:
        - name: workload-socket
        - name: workload-certs
        - emptyDir:
            medium: Memory
          name: istio-envoy
        - emptyDir: {}
          name: istio-data
        - downwardAPI:
            items:
            - fieldRef:
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                fieldPath: metadata.annotations
              path: annotations
          name: istio-podinfo
        - name: istio-token
          projected:
            sources:
            - serviceAccountToken:
                audience: istio-ca
                expirationSeconds: 43200
                path: istio-token
        - configMap:
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - configMap:
            defaultMode: 420
            name: user-timeline-service
          name: user-timeline-service-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-08-26T06:37:09Z"
      lastUpdateTime: "2022-08-26T06:37:09Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2022-08-26T06:36:58Z"
      lastUpdateTime: "2022-08-26T06:37:09Z"
      message: ReplicaSet "user-timeline-service-5768c98dc6" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"compose-post-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"compose-post-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:01Z"
    name: compose-post-service
    namespace: default
    resourceVersion: "169326"
    uid: 0f68f99b-00ae-44af-85dc-ca3ccfad8885
  spec:
    clusterIP: 10.100.193.198
    clusterIPs:
    - 10.100.193.198
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: compose-post-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"home-timeline-redis","namespace":"default"},"spec":{"ports":[{"name":"6379","port":6379,"targetPort":6379}],"selector":{"service":"home-timeline-redis"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:01Z"
    name: home-timeline-redis
    namespace: default
    resourceVersion: "169345"
    uid: 5cb11026-fed4-4a2b-9c45-1faea79582af
  spec:
    clusterIP: 10.96.11.136
    clusterIPs:
    - 10.96.11.136
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "6379"
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      service: home-timeline-redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"home-timeline-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"home-timeline-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:02Z"
    name: home-timeline-service
    namespace: default
    resourceVersion: "169369"
    uid: e45c3357-0d4b-4ad1-a751-3e2fcdeab0fd
  spec:
    clusterIP: 10.103.77.222
    clusterIPs:
    - 10.103.77.222
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: home-timeline-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"jaeger","namespace":"default"},"spec":{"ports":[{"name":"5775","nodePort":32000,"port":5775,"protocol":"UDP","targetPort":5775},{"name":"6831","nodePort":32001,"port":6831,"protocol":"UDP","targetPort":6831},{"name":"6832","nodePort":32002,"port":6832,"protocol":"UDP","targetPort":6832},{"name":"5778","nodePort":32003,"port":5778,"targetPort":5778},{"name":"16686","nodePort":32004,"port":16686,"targetPort":16686},{"name":"14268","nodePort":32005,"port":14268,"targetPort":14268},{"name":"9411","nodePort":32006,"port":9411,"targetPort":9411}],"selector":{"service":"jaeger"},"type":"NodePort"}}
    creationTimestamp: "2022-08-26T06:36:03Z"
    name: jaeger
    namespace: default
    resourceVersion: "169401"
    uid: 0560eede-4fc5-410d-a56a-c9a47f33b29e
  spec:
    clusterIP: 10.96.66.55
    clusterIPs:
    - 10.96.66.55
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "5775"
      nodePort: 32000
      port: 5775
      protocol: UDP
      targetPort: 5775
    - name: "6831"
      nodePort: 32001
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: "6832"
      nodePort: 32002
      port: 6832
      protocol: UDP
      targetPort: 6832
    - name: "5778"
      nodePort: 32003
      port: 5778
      protocol: TCP
      targetPort: 5778
    - name: "16686"
      nodePort: 32004
      port: 16686
      protocol: TCP
      targetPort: 16686
    - name: "14268"
      nodePort: 32005
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: "9411"
      nodePort: 32006
      port: 9411
      protocol: TCP
      targetPort: 9411
    selector:
      service: jaeger
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2022-08-26T06:31:59Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "168042"
    uid: 743e5b16-c0e6-4909-8923-572859779c09
  spec:
    clusterIP: 10.96.0.1
    clusterIPs:
    - 10.96.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 6443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"media-frontend","namespace":"default"},"spec":{"ports":[{"name":"8081","port":8081,"targetPort":8080}],"selector":{"service":"media-frontend"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:04Z"
    name: media-frontend
    namespace: default
    resourceVersion: "169421"
    uid: f85ca174-0021-472b-a051-86d684b4ebf8
  spec:
    clusterIP: 10.111.121.191
    clusterIPs:
    - 10.111.121.191
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "8081"
      port: 8081
      protocol: TCP
      targetPort: 8080
    selector:
      service: media-frontend
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"media-memcached","namespace":"default"},"spec":{"ports":[{"name":"11211","port":11211,"targetPort":11211}],"selector":{"service":"media-memcached"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:06Z"
    name: media-memcached
    namespace: default
    resourceVersion: "169451"
    uid: 8e263cca-3ffc-49c6-8740-2bf2fc0307c7
  spec:
    clusterIP: 10.99.48.230
    clusterIPs:
    - 10.99.48.230
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "11211"
      port: 11211
      protocol: TCP
      targetPort: 11211
    selector:
      service: media-memcached
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"media-mongodb","namespace":"default"},"spec":{"ports":[{"name":"27017","port":27017,"targetPort":27017}],"selector":{"service":"media-mongodb"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:07Z"
    name: media-mongodb
    namespace: default
    resourceVersion: "169478"
    uid: d6537753-cbff-45e4-b64b-e2fb7fc9fdb4
  spec:
    clusterIP: 10.97.153.129
    clusterIPs:
    - 10.97.153.129
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "27017"
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      service: media-mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"media-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"media-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:10Z"
    name: media-service
    namespace: default
    resourceVersion: "169516"
    uid: 59b0e6b5-a5af-463e-ad9f-912efaeb5502
  spec:
    clusterIP: 10.101.111.81
    clusterIPs:
    - 10.101.111.81
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: media-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"nginx-thrift","namespace":"default"},"spec":{"ports":[{"name":"8080","nodePort":31111,"port":8080,"targetPort":8080}],"selector":{"service":"nginx-thrift"},"type":"NodePort"}}
    creationTimestamp: "2022-08-26T06:36:11Z"
    name: nginx-thrift
    namespace: default
    resourceVersion: "169557"
    uid: a63e2399-56e8-4393-9a3e-786ae57e371f
  spec:
    clusterIP: 10.99.55.212
    clusterIPs:
    - 10.99.55.212
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "8080"
      nodePort: 31111
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      service: nginx-thrift
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"post-storage-memcached","namespace":"default"},"spec":{"ports":[{"name":"11211","port":11211,"targetPort":11211}],"selector":{"service":"post-storage-memcached"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:14Z"
    name: post-storage-memcached
    namespace: default
    resourceVersion: "169581"
    uid: 8018693b-e066-4481-809f-ffa7f7e2a4a0
  spec:
    clusterIP: 10.100.180.229
    clusterIPs:
    - 10.100.180.229
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "11211"
      port: 11211
      protocol: TCP
      targetPort: 11211
    selector:
      service: post-storage-memcached
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"post-storage-mongodb","namespace":"default"},"spec":{"ports":[{"name":"27017","port":27017,"targetPort":27017}],"selector":{"service":"post-storage-mongodb"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:16Z"
    name: post-storage-mongodb
    namespace: default
    resourceVersion: "169608"
    uid: 6dfca840-9aa4-4084-b386-8c20927ca9a0
  spec:
    clusterIP: 10.96.60.62
    clusterIPs:
    - 10.96.60.62
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "27017"
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      service: post-storage-mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"post-storage-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"post-storage-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:18Z"
    name: post-storage-service
    namespace: default
    resourceVersion: "169645"
    uid: 7fe03b27-6b3a-416f-9515-b44eec55d4f5
  spec:
    clusterIP: 10.100.16.135
    clusterIPs:
    - 10.100.16.135
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: post-storage-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"social-graph-mongodb","namespace":"default"},"spec":{"ports":[{"name":"27017","port":27017,"targetPort":27017}],"selector":{"service":"social-graph-mongodb"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:20Z"
    name: social-graph-mongodb
    namespace: default
    resourceVersion: "169683"
    uid: 89d8c3bb-66c3-49ba-9a9e-1e8db9af9b93
  spec:
    clusterIP: 10.107.214.134
    clusterIPs:
    - 10.107.214.134
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "27017"
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      service: social-graph-mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"social-graph-redis","namespace":"default"},"spec":{"ports":[{"name":"6379","port":6379,"targetPort":6379}],"selector":{"service":"social-graph-redis"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:23Z"
    name: social-graph-redis
    namespace: default
    resourceVersion: "169711"
    uid: 64419a9e-0a46-44f3-a485-3a3c743a000f
  spec:
    clusterIP: 10.108.16.148
    clusterIPs:
    - 10.108.16.148
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "6379"
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      service: social-graph-redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"social-graph-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"social-graph-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:25Z"
    name: social-graph-service
    namespace: default
    resourceVersion: "169743"
    uid: 97c1039c-8a82-44f2-a1d4-1edde0083d69
  spec:
    clusterIP: 10.106.51.1
    clusterIPs:
    - 10.106.51.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: social-graph-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"text-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"text-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:27Z"
    name: text-service
    namespace: default
    resourceVersion: "169771"
    uid: dc34849e-7f26-4bee-b7ec-7c6d8dc51db7
  spec:
    clusterIP: 10.105.237.165
    clusterIPs:
    - 10.105.237.165
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: text-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"unique-id-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"unique-id-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:29Z"
    name: unique-id-service
    namespace: default
    resourceVersion: "169808"
    uid: 7b228d0c-2bb8-4c55-a614-387d3f944ea3
  spec:
    clusterIP: 10.96.9.197
    clusterIPs:
    - 10.96.9.197
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: unique-id-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"url-shorten-memcached","namespace":"default"},"spec":{"ports":[{"name":"11211","port":11211,"targetPort":11211}],"selector":{"service":"url-shorten-memcached"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:33Z"
    name: url-shorten-memcached
    namespace: default
    resourceVersion: "169838"
    uid: 61f5d27f-8c1c-4fe9-855e-992fcc37447f
  spec:
    clusterIP: 10.108.203.241
    clusterIPs:
    - 10.108.203.241
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "11211"
      port: 11211
      protocol: TCP
      targetPort: 11211
    selector:
      service: url-shorten-memcached
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"url-shorten-mongodb","namespace":"default"},"spec":{"ports":[{"name":"27017","port":27017,"targetPort":27017}],"selector":{"service":"url-shorten-mongodb"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:34Z"
    name: url-shorten-mongodb
    namespace: default
    resourceVersion: "169865"
    uid: 9bca8697-294a-47bb-85b7-58ad54328973
  spec:
    clusterIP: 10.103.60.70
    clusterIPs:
    - 10.103.60.70
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "27017"
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      service: url-shorten-mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"url-shorten-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"url-shorten-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:38Z"
    name: url-shorten-service
    namespace: default
    resourceVersion: "169904"
    uid: 909d139b-c3dc-4327-9d98-83c522d7dc62
  spec:
    clusterIP: 10.107.19.44
    clusterIPs:
    - 10.107.19.44
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: url-shorten-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"user-memcached","namespace":"default"},"spec":{"ports":[{"name":"11211","port":11211,"targetPort":11211}],"selector":{"service":"user-memcached"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:41Z"
    name: user-memcached
    namespace: default
    resourceVersion: "169931"
    uid: dc766cc5-a879-418b-a37f-bd58c0df065b
  spec:
    clusterIP: 10.100.176.252
    clusterIPs:
    - 10.100.176.252
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "11211"
      port: 11211
      protocol: TCP
      targetPort: 11211
    selector:
      service: user-memcached
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"user-mention-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"user-mention-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:43Z"
    name: user-mention-service
    namespace: default
    resourceVersion: "169958"
    uid: e94a6fea-76ed-4446-9722-f49050818b99
  spec:
    clusterIP: 10.108.245.243
    clusterIPs:
    - 10.108.245.243
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: user-mention-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"user-mongodb","namespace":"default"},"spec":{"ports":[{"name":"27017","port":27017,"targetPort":27017}],"selector":{"service":"user-mongodb"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:46Z"
    name: user-mongodb
    namespace: default
    resourceVersion: "170008"
    uid: 69609935-1d0d-47f9-97da-654af6c37756
  spec:
    clusterIP: 10.107.130.66
    clusterIPs:
    - 10.107.130.66
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "27017"
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      service: user-mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"user-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"user-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:50Z"
    name: user-service
    namespace: default
    resourceVersion: "170051"
    uid: cab71808-7cdf-41cb-af20-afd917b61c9d
  spec:
    clusterIP: 10.97.251.157
    clusterIPs:
    - 10.97.251.157
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: user-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"user-timeline-mongodb","namespace":"default"},"spec":{"ports":[{"name":"27017","port":27017,"targetPort":27017}],"selector":{"service":"user-timeline-mongodb"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:52Z"
    name: user-timeline-mongodb
    namespace: default
    resourceVersion: "170086"
    uid: 0b21a6a9-61a7-46db-ad5f-fcca1370863c
  spec:
    clusterIP: 10.109.98.185
    clusterIPs:
    - 10.109.98.185
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "27017"
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      service: user-timeline-mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"user-timeline-redis","namespace":"default"},"spec":{"ports":[{"name":"6379","port":6379,"targetPort":6379}],"selector":{"service":"user-timeline-redis"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:55Z"
    name: user-timeline-redis
    namespace: default
    resourceVersion: "170124"
    uid: ca69e755-9d84-400c-a4b1-6674589d81c8
  spec:
    clusterIP: 10.109.189.79
    clusterIPs:
    - 10.109.189.79
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "6379"
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      service: user-timeline-redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"user-timeline-service","namespace":"default"},"spec":{"ports":[{"name":"9090","port":9090,"targetPort":9090}],"selector":{"service":"user-timeline-service"},"type":"ClusterIP"}}
    creationTimestamp: "2022-08-26T06:36:58Z"
    name: user-timeline-service
    namespace: default
    resourceVersion: "170162"
    uid: 90060d9f-5f99-4fd9-81e8-02854478b173
  spec:
    clusterIP: 10.97.37.241
    clusterIPs:
    - 10.97.37.241
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "9090"
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      service: user-timeline-service
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"compose-post-service"},"name":"compose-post-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:01Z"
    labels:
      socialnetwork/service: compose-post-service
    name: compose-post-service
    namespace: default
    resourceVersion: "169320"
    uid: 06190162-72a0-4526-84e6-cf1055b7f265
- apiVersion: v1
  data:
    redis.conf: |
      io-threads 8
      io-threads-do-reads yes
      port 6379
      tls-port 0

      tls-cert-file /keys/server.crt
      tls-key-file /keys/server.key

      tls-auth-clients no
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"redis.conf":"io-threads 8\nio-threads-do-reads yes\nport 6379\ntls-port 0\n\ntls-cert-file /keys/server.crt\ntls-key-file /keys/server.key\n\ntls-auth-clients no\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"home-timeline-redis"},"name":"home-timeline-redis","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:01Z"
    labels:
      socialnetwork/service: home-timeline-redis
    name: home-timeline-redis
    namespace: default
    resourceVersion: "169335"
    uid: 697e6c38-6693-40b7-9677-6e51a4365071
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"home-timeline-service"},"name":"home-timeline-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:02Z"
    labels:
      socialnetwork/service: home-timeline-service
    name: home-timeline-service
    namespace: default
    resourceVersion: "169356"
    uid: 17eab3c7-90b1-4db4-906b-9fa35ab8943e
- apiVersion: v1
  data:
    root-cert.pem: |
      -----BEGIN CERTIFICATE-----
      MIIC/DCCAeSgAwIBAgIQbGW+O3j6HVnYN81uVKtbrTANBgkqhkiG9w0BAQsFADAY
      MRYwFAYDVQQKEw1jbHVzdGVyLmxvY2FsMB4XDTIyMDgyNTE2MDk0OVoXDTMyMDgy
      MjE2MDk0OVowGDEWMBQGA1UEChMNY2x1c3Rlci5sb2NhbDCCASIwDQYJKoZIhvcN
      AQEBBQADggEPADCCAQoCggEBALypyvSDLSlKP+m+opTukCsh7XXPSGAvShIvU7/0
      4MoX/sN8z8UAmErLQcYkVY7qKEedqdh+fgfq52tibriqy8guVDocG2RMAtoiN1fN
      q+HoWI0tqMvJrDxSBWivlYCm+QZMpYV1bSqppc4ey8cwJrCVkFe0dkNlUAKqE3Ku
      YzjBEkytgma0GdsEsmCpk+ylLzX+R7+usrWm4QnCbnfY+nAWpJUXYgAXrnQtg2bB
      sgY0FFsZsMwtkqJBzhOq5zKTUOQHBxLwb5gVR/v0AazVLItUuJkzKQ8bqy3tTB2p
      CDOz6DEg3SlBDGwXOr53t7pXpABbpPYBa34X6lgiT+z+RbECAwEAAaNCMEAwDgYD
      VR0PAQH/BAQDAgIEMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFIYhIjisnjWR
      I6ki9c25i05kh5baMA0GCSqGSIb3DQEBCwUAA4IBAQB6h0JVgvBhdpfvSND86iFX
      HXE7/FPRSGSfFa2tnRQzeWhoUPBy5idMqeH7+Ixx5TH/pVjZfMzos5L7YLyoyhz8
      W20smY88izP2Fpq7lo1jDhYtgbPz4Rmrcc248oFvqQZy2lVZXuN7xROa3U7DVR+R
      1PH7bF+xnF3e9QQPhhmMk4FOqY6PTO/mAbybZ+ABSFY4VJIZWSXd2CWRjQvxkikI
      T2MkLCBtEuJNjmdvZuiwsa/L4g+wU/cHtZzb6GPE8dIxoqn8gVLSm7D8rmaVsqkH
      3HJnHFXQYaRrue4FmL97/dmEOcpPQ6dLwJsTQYIldvsLx/p8W48bR0jegPK5gBsS
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    creationTimestamp: "2022-08-25T16:09:50Z"
    labels:
      istio.io/config: "true"
    name: istio-ca-root-cert
    namespace: default
    resourceVersion: "6437"
    uid: 0e5e4762-743d-4883-a12c-e10dabd94119
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"jaeger"},"name":"jaeger","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:02Z"
    labels:
      socialnetwork/service: jaeger
    name: jaeger
    namespace: default
    resourceVersion: "169377"
    uid: dd8e54a0-7ec1-41f9-b298-c6eb8a52c773
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIC/jCCAeagAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl
      cm5ldGVzMB4XDTIyMDgyNTE1NDAxNFoXDTMyMDgyMjE1NDAxNFowFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK5W
      mysbbGEqusgGDZqh0++AGS6P/7I8VzhQOJQZNzDJhiz7j27KRr6FTWjgx7RYz367
      vHDfoNdWOCPKgd+IiQxHlcWfCdS5syP8OJjGau9HoC02nVq0DmQKGCGhkgp3sAUy
      kfEGAKUrUbp25qx9iTPfBeSYJPBK194VrCTpzl0bIE4VmABXhNKvbdxUrh4qsrXm
      3TrX/7zxxGfQaBxvP6Jeq2Fqck/fiNj/M01Nazt0A1SzHs07hY+RTxHc3DMLujHh
      8KDEPkAI63yNirak0ylMv2yKOqgTxcfHT8nC40lZvzgz/i+wd/CMbMPL4t3PuVAi
      fCdJmqYV1twwj4Y9FT8CAwEAAaNZMFcwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB
      /wQFMAMBAf8wHQYDVR0OBBYEFKsCWxfjh1BgGrPUE2AdqX0ixkomMBUGA1UdEQQO
      MAyCCmt1YmVybmV0ZXMwDQYJKoZIhvcNAQELBQADggEBAKkZKeT5Nx73Rhdjv07G
      eDP5G6eOQS69R2OlT5f1FUg/e/Kkh4h+LQx4LDwWsHMQB/nD80WFXvTOpE6QTfjA
      MwmGA/WhTn+adt3EUcPAqmJRkchcmEcKc8SfL50IH/ZADkbv4BG7unBx6hf0h7Cs
      NvQJKad24KKg5wuyaTdud/uf2bUXNpWGLmTge9XSniPPnQUhImM8munCW5ECMo5v
      vll5KElCrCDqKtOAx9HAZAErKVP2nv/o7p13v/gC7R4pRMYVeb65HgV7sp6iv93J
      8xgqeNQhWvPfZGzo3d+w39fc22ytKwk+EZYpU0fjRHDEdzBV6VPgSSQAy6OeVKEM
      maU=
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2022-08-25T15:41:00Z"
    name: kube-root-ca.crt
    namespace: default
    resourceVersion: "420"
    uid: 317eb1c7-b730-4b8f-a14f-5027fae17423
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    nginx.conf: |
      # Checklist: Make sure that worker_processes == #cores you gave to
      # nginx process
      worker_processes  16;

      # error_log  logs/error.log;

      # Checklist: Make sure that worker_connections * worker_processes
      # is greater than the total connections between the client and Nginx.
      events {
        worker_connections  1024;
      }

      env fqdn_suffix;

      http {
        include       mime.types;
        default_type  application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request"'
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        # access_log  logs/access.log  main;

        sendfile        on;
        tcp_nopush      on;
        tcp_nodelay     on;

        # Checklist: Make sure the keepalive_timeout is greateer than
        # the duration of your experiment and keepalive_requests
        # is greateer than the total number of requests sent from
        # the workload generator
        keepalive_timeout  120s;
        keepalive_requests 100000;

        # Docker default hostname resolver
        resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;

        lua_package_path '/usr/local/openresty/nginx/lua-scripts/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;;';

        lua_shared_dict config 32k;

        init_by_lua_block {
          local upload = require "resty.upload"
          local memcached = require "resty.memcached"
          local mongo = require "resty-mongol"
        }

        server {

          # Checklist: Set up the port that nginx listens to.
          listen       8080 reuseport;
          server_name  localhost;

          # Checklist: Turn of the access_log and error_log if you
          # don't need them.
          access_log  off;
          # error_log off;

          client_max_body_size 100M;
          client_body_buffer_size 100M;

          # Checklist: Make sure that the location here is consistent
          # with the location you specified in wrk2.
          location /upload-media {
                if ($request_method = 'OPTIONS') {
                  add_header 'Access-Control-Allow-Origin' '*';
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                  add_header 'Access-Control-Max-Age' 1728000;
                  add_header 'Content-Type' 'text/plain; charset=utf-8';
                  add_header 'Content-Length' 0;
                  return 204;
                }
                if ($request_method = 'POST') {
                  add_header 'Access-Control-Allow-Origin' '*';
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                  add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
                }
                if ($request_method = 'GET') {
                  add_header 'Access-Control-Allow-Origin' '*';
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                  add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
                }
            content_by_lua '
              local client = require "upload-media"
              client.UploadMedia();
            ';
          }

          # Checklist: Make sure that the location here is consistent
          # with the location you specified in wrk2.
          location /get-media {
                if ($request_method = 'OPTIONS') {
                  add_header 'Access-Control-Allow-Origin' '*';
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                  add_header 'Access-Control-Max-Age' 1728000;
                  add_header 'Content-Type' 'text/plain; charset=utf-8';
                  add_header 'Content-Length' 0;
                  return 204;
                }
                if ($request_method = 'POST') {
                  add_header 'Access-Control-Allow-Origin' '*';
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                  add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
                }
                if ($request_method = 'GET') {
                  add_header 'Access-Control-Allow-Origin' '*';
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                  add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
                }
            content_by_lua '
              local client = require "get-media"
              client.GetMedia();
            ';
          }

        }
      }
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","nginx.conf":"# Checklist: Make sure that worker_processes == #cores you gave to\n# nginx process\nworker_processes  16;\n\n# error_log  logs/error.log;\n\n# Checklist: Make sure that worker_connections * worker_processes\n# is greater than the total connections between the client and Nginx.\nevents {\n  worker_connections  1024;\n}\n\nenv fqdn_suffix;\n\nhttp {\n  include       mime.types;\n  default_type  application/octet-stream;\n\n  log_format main '$remote_addr - $remote_user [$time_local] \"$request\"'\n                  '$status $body_bytes_sent \"$http_referer\" '\n                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  # access_log  logs/access.log  main;\n\n  sendfile        on;\n  tcp_nopush      on;\n  tcp_nodelay     on;\n\n  # Checklist: Make sure the keepalive_timeout is greateer than\n  # the duration of your experiment and keepalive_requests\n  # is greateer than the total number of requests sent from\n  # the workload generator\n  keepalive_timeout  120s;\n  keepalive_requests 100000;\n\n  # Docker default hostname resolver\n  resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;\n\n  lua_package_path '/usr/local/openresty/nginx/lua-scripts/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;;';\n\n  lua_shared_dict config 32k;\n\n  init_by_lua_block {\n    local upload = require \"resty.upload\"\n    local memcached = require \"resty.memcached\"\n    local mongo = require \"resty-mongol\"\n  }\n\n  server {\n\n    # Checklist: Set up the port that nginx listens to.\n    listen       8080 reuseport;\n    server_name  localhost;\n\n    # Checklist: Turn of the access_log and error_log if you\n    # don't need them.\n    access_log  off;\n    # error_log off;\n\n    client_max_body_size 100M;\n    client_body_buffer_size 100M;\n\n    # Checklist: Make sure that the location here is consistent\n    # with the location you specified in wrk2.\n    location /upload-media {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n        local client = require \"upload-media\"\n        client.UploadMedia();\n      ';\n    }\n\n    # Checklist: Make sure that the location here is consistent\n    # with the location you specified in wrk2.\n    location /get-media {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n        local client = require \"get-media\"\n        client.GetMedia();\n      ';\n    }\n\n  }\n}\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"media-frontend"},"name":"media-frontend","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:04Z"
    labels:
      socialnetwork/service: media-frontend
    name: media-frontend
    namespace: default
    resourceVersion: "169406"
    uid: 3c5990b8-f775-423c-a60b-96fc31d13b27
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"media-memcached"},"name":"media-memcached","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:05Z"
    labels:
      socialnetwork/service: media-memcached
    name: media-memcached
    namespace: default
    resourceVersion: "169429"
    uid: b8f5e2a5-4ed4-49fd-bf33-617034d287be
- apiVersion: v1
  data:
    mongod.conf: |
      net:
        tls:
          mode: disabled
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"mongod.conf":"net:\n  tls:\n    mode: disabled\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"media-mongodb"},"name":"media-mongodb","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:07Z"
    labels:
      socialnetwork/service: media-mongodb
    name: media-mongodb
    namespace: default
    resourceVersion: "169457"
    uid: 95226b25-6aff-4173-aaf9-88fab568efa5
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"media-service"},"name":"media-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:09Z"
    labels:
      socialnetwork/service: media-service
    name: media-service
    namespace: default
    resourceVersion: "169492"
    uid: 146fda8f-3ab1-4eb1-868c-73659c2b3e41
- apiVersion: v1
  data:
    jaeger-config.json: |
      {
        "service_name": "nginx-web-server",
        "disabled": true,
        "reporter": {
          "logSpans": false,
          "localAgentHostPort": "jaeger:6831",
          "queueSize": 1000000,
          "bufferFlushInterval": 10
        },
        "sampler": {
          "type": "probabilistic",
          "param": 0.01
        }
      }
    nginx.conf: "# Load the OpenTracing dynamic module.\nload_module modules/ngx_http_opentracing_module.so;\n\n#
      Checklist: Make sure that worker_processes == #cores you gave to\n# nginx process\nworker_processes
      \ 4;\n\n# error_log  logs/error.log;\n\n# Checklist: Make sure that worker_connections
      * worker_processes\n# is greater than the total connections between the client
      and Nginx. \nevents {\n  use epoll;\n  worker_connections  1024;\n}\n\nenv fqdn_suffix;\n\nhttp
      {\n  # Load a vendor tracer\n  opentracing on;\n  opentracing_load_tracer /usr/local/lib/libjaegertracing_plugin.so
      /usr/local/openresty/nginx/jaeger-config.json;\n\n  include       mime.types;\n
      \ default_type  application/octet-stream;\n\n  proxy_read_timeout 5000;\n  proxy_connect_timeout
      5000;\n  proxy_send_timeout 5000;\n  \n  log_format main '$remote_addr - $remote_user
      [$time_local] \"$request\"'\n                  '$status $body_bytes_sent \"$http_referer\"
      '\n                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  #
      access_log  logs/access.log  main;\n\n  sendfile        on;\n  tcp_nopush      on;\n
      \ tcp_nodelay     on;\n\n  # Checklist: Make sure the keepalive_timeout is greateer
      than\n  # the duration of your experiment and keepalive_requests\n  # is greateer
      than the total number of requests sent from\n  # the workload generator\n  keepalive_timeout
      \ 120s;\n  keepalive_requests 100000;\n\n  # Docker default hostname resolver.
      Set valid timeout to prevent unlimited\n  # ttl for resolver caching.\n  # resolver
      127.0.0.11 valid=10s ipv6=off;\n  resolver kube-dns.kube-system.svc.cluster.local
      valid=10s ipv6=off;\n\n  lua_package_path '/usr/local/openresty/nginx/lua-scripts/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;;';\n\n
      \ lua_shared_dict config 32k;\n\n  init_by_lua_block {\n    local bridge_tracer
      = require \"opentracing_bridge_tracer\"\n    local GenericObjectPool = require
      \"GenericObjectPool\"\n    local ngx = ngx\n    local jwt = require \"resty.jwt\"\n
      \   local cjson = require 'cjson'\n\n    local social_network_UserTimelineService
      = require 'social_network_UserTimelineService'\n    local UserTimelineServiceClient
      = social_network_UserTimelineService.social_network_UserTimelineService\n    local
      social_network_SocialGraphService = require 'social_network_SocialGraphService'\n
      \   local SocialGraphServiceClient = social_network_SocialGraphService.SocialGraphServiceClient\n
      \   local social_network_ComposePostService = require 'social_network_ComposePostService'\n
      \   local ComposePostServiceClient = social_network_ComposePostService.ComposePostServiceClient\n
      \   local social_network_UserService = require 'social_network_UserService'\n
      \   local UserServiceClient = social_network_UserService.UserServiceClient\n\n\n
      \   local config = ngx.shared.config;\n    config:set(\"secret\", \"secret\")\n
      \   config:set(\"cookie_ttl\", 3600 * 24)\n    config:set(\"ssl\", false)\n
      \ }\n\n  server {\n\n    # Checklist: Set up the port that nginx listens to.\n
      \   listen       8080 reuseport;\n    server_name  localhost;\n\n    # Checklist:
      Turn of the access_log and error_log if you\n    # don't need them.\n    access_log
      \ off;\n    # error_log off;\n\n    lua_need_request_body on;\n\n    # Used
      when SSL enabled\n    lua_ssl_trusted_certificate /keys/CA.pem;\n    lua_ssl_ciphers
      ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH;\n\n    # Checklist: Make sure that the location
      here is consistent\n    # with the location you specified in wrk2.\n    location
      /api/user/register {\n          if ($request_method = 'OPTIONS') {\n            add_header
      'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Max-Age' 1728000;\n            add_header
      'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length'
      0;\n            return 204;\n          }\n          if ($request_method = 'POST')
      {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n          if ($request_method = 'GET') {\n            add_header
      'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n      content_by_lua '\n          local client = require \"api/user/register\"\n
      \         client.RegisterUser();\n      ';\n    }\n\n    location /api/user/follow
      {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin'
      '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \           add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Max-Age' 1728000;\n            add_header
      'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length'
      0;\n            return 204;\n          }\n          if ($request_method = 'POST')
      {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n          if ($request_method = 'GET') {\n            add_header
      'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n      content_by_lua '\n          local client = require \"api/user/follow\"\n
      \         client.Follow();\n      ';\n    }\n\n    location /api/user/unfollow
      {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin'
      '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \           add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Max-Age' 1728000;\n            add_header
      'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length'
      0;\n            return 204;\n          }\n          if ($request_method = 'POST')
      {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n          if ($request_method = 'GET') {\n            add_header
      'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n      content_by_lua '\n          local client = require \"api/user/unfollow\"\n
      \         client.Unfollow();\n      ';\n    }\n\n    location /api/user/login
      {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin'
      '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \           add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Max-Age' 1728000;\n            add_header
      'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length'
      0;\n            return 204;\n          }\n          if ($request_method = 'POST')
      {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n          if ($request_method = 'GET') {\n            add_header
      'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n      content_by_lua '\n          local client = require \"api/user/login\"\n
      \         client.Login();\n      ';\n    }\n\n    location /api/post/compose
      {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin'
      '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \           add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Max-Age' 1728000;\n            add_header
      'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length'
      0;\n            return 204;\n          }\n          if ($request_method = 'POST')
      {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n          if ($request_method = 'GET') {\n            add_header
      'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n      content_by_lua '\n          local client = require \"api/post/compose\"\n
      \         client.ComposePost();\n      ';\n    }\n\n    location /api/user-timeline/read
      {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin'
      '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \           add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Max-Age' 1728000;\n            add_header
      'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length'
      0;\n            return 204;\n          }\n          if ($request_method = 'POST')
      {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n          if ($request_method = 'GET') {\n            add_header
      'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n      content_by_lua '\n          local client = require \"api/user-timeline/read\"\n
      \         client.ReadUserTimeline();\n      ';\n    }\n\n    location /api/home-timeline/read
      {\n            if ($request_method = 'OPTIONS') {\n              add_header
      'Access-Control-Allow-Origin' '*';\n              add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n              add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \             add_header 'Access-Control-Max-Age' 1728000;\n              add_header
      'Content-Type' 'text/plain; charset=utf-8';\n              add_header 'Content-Length'
      0;\n              return 204;\n            }\n            if ($request_method
      = 'POST') {\n              add_header 'Access-Control-Allow-Origin' '*';\n              add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n              add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \             add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \           }\n            if ($request_method = 'GET') {\n              add_header
      'Access-Control-Allow-Origin' '*';\n              add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n              add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \             add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \           }\n      content_by_lua '\n          local client = require \"api/home-timeline/read\"\n
      \         client.ReadHomeTimeline();\n      ';\n    }\n\n    # # get userinfo
      lua\n    # location /api/user/user_info {\n    #       if ($request_method =
      'OPTIONS') {\n    #         add_header 'Access-Control-Allow-Origin' '*';\n
      \   #         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \   #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \   #         add_header 'Access-Control-Max-Age' 1728000;\n    #         add_header
      'Content-Type' 'text/plain; charset=utf-8';\n    #         add_header 'Content-Length'
      0;\n    #         return 204;\n    #       }\n    #       if ($request_method
      = 'POST') {\n    #         add_header 'Access-Control-Allow-Origin' '*';\n    #
      \        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n    #
      \        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \   #         add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \   #       }\n    #       if ($request_method = 'GET') {\n    #         add_header
      'Access-Control-Allow-Origin' '*';\n    #         add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n    #         add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \   #         add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \   #       }\n    #   content_by_lua '\n    #       local client = require
      \"api/user/user_info\"\n    #       client.UserInfo();\n    #   ';\n    # }\n
      \   # get follower lua\n    location /api/user/get_follower {\n          if
      ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin'
      '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \           add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Max-Age' 1728000;\n            add_header
      'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length'
      0;\n            return 204;\n          }\n          if ($request_method = 'POST')
      {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n          if ($request_method = 'GET') {\n            add_header
      'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n      content_by_lua '\n          local client = require \"api/user/get_follower\"\n
      \         client.GetFollower();\n      ';\n    }\n\n    # get followee lua\n
      \   location /api/user/get_followee {\n          if ($request_method = 'OPTIONS')
      {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Max-Age' 1728000;\n            add_header
      'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length'
      0;\n            return 204;\n          }\n          if ($request_method = 'POST')
      {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header
      'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header
      'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n          if ($request_method = 'GET') {\n            add_header
      'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods'
      'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers'
      'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \           add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \         }\n      content_by_lua '\n          local client = require \"api/user/get_followee\"\n
      \         client.GetFollowee();\n      ';\n    }\n    location / {\n      if
      ($request_method = 'OPTIONS') {\n        add_header 'Access-Control-Allow-Origin'
      '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \       add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \       add_header 'Access-Control-Max-Age' 1728000;\n        add_header 'Content-Type'
      'text/plain; charset=utf-8';\n        add_header 'Content-Length' 0;\n        return
      204;\n      }\n      if ($request_method = 'POST') {\n        add_header 'Access-Control-Allow-Origin'
      '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \       add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \       add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \     }\n      if ($request_method = 'GET') {\n        add_header 'Access-Control-Allow-Origin'
      '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n
      \       add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n
      \       add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n
      \     }\n      root pages;\n    }\n\n    location /wrk2-api/home-timeline/read
      {\n      content_by_lua '\n          local client = require \"wrk2-api/home-timeline/read\"\n
      \         client.ReadHomeTimeline();\n      ';\n    }\n\n    location /wrk2-api/user-timeline/read
      {\n      content_by_lua '\n          local client = require \"wrk2-api/user-timeline/read\"\n
      \         client.ReadUserTimeline();\n      ';\n    }\n\n    location /wrk2-api/post/compose
      {\n      content_by_lua '\n          local client = require \"wrk2-api/post/compose\"\n
      \         client.ComposePost();\n      ';\n    }\n\n    location /wrk2-api/user/register
      {\n      content_by_lua '\n          local client = require \"wrk2-api/user/register\"\n
      \         client.RegisterUser();\n      ';\n    }\n\n    location /wrk2-api/user/follow
      {\n      content_by_lua '\n          local client = require \"wrk2-api/user/follow\"\n
      \         client.Follow();\n      ';\n    }\n\n    location /wrk2-api/user/unfollow
      {\n      content_by_lua '\n          local client = require \"wrk2-api/user/unfollow\"\n
      \         client.Unfollow();\n      ';\n    }\n\n  }\n}\n"
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.json":"{\n  \"service_name\": \"nginx-web-server\",\n  \"disabled\": true,\n  \"reporter\": {\n    \"logSpans\": false,\n    \"localAgentHostPort\": \"jaeger:6831\",\n    \"queueSize\": 1000000,\n    \"bufferFlushInterval\": 10\n  },\n  \"sampler\": {\n    \"type\": \"probabilistic\",\n    \"param\": 0.01\n  }\n}\n","nginx.conf":"# Load the OpenTracing dynamic module.\nload_module modules/ngx_http_opentracing_module.so;\n\n# Checklist: Make sure that worker_processes == #cores you gave to\n# nginx process\nworker_processes  4;\n\n# error_log  logs/error.log;\n\n# Checklist: Make sure that worker_connections * worker_processes\n# is greater than the total connections between the client and Nginx. \nevents {\n  use epoll;\n  worker_connections  1024;\n}\n\nenv fqdn_suffix;\n\nhttp {\n  # Load a vendor tracer\n  opentracing on;\n  opentracing_load_tracer /usr/local/lib/libjaegertracing_plugin.so /usr/local/openresty/nginx/jaeger-config.json;\n\n  include       mime.types;\n  default_type  application/octet-stream;\n\n  proxy_read_timeout 5000;\n  proxy_connect_timeout 5000;\n  proxy_send_timeout 5000;\n  \n  log_format main '$remote_addr - $remote_user [$time_local] \"$request\"'\n                  '$status $body_bytes_sent \"$http_referer\" '\n                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  # access_log  logs/access.log  main;\n\n  sendfile        on;\n  tcp_nopush      on;\n  tcp_nodelay     on;\n\n  # Checklist: Make sure the keepalive_timeout is greateer than\n  # the duration of your experiment and keepalive_requests\n  # is greateer than the total number of requests sent from\n  # the workload generator\n  keepalive_timeout  120s;\n  keepalive_requests 100000;\n\n  # Docker default hostname resolver. Set valid timeout to prevent unlimited\n  # ttl for resolver caching.\n  # resolver 127.0.0.11 valid=10s ipv6=off;\n  resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;\n\n  lua_package_path '/usr/local/openresty/nginx/lua-scripts/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;;';\n\n  lua_shared_dict config 32k;\n\n  init_by_lua_block {\n    local bridge_tracer = require \"opentracing_bridge_tracer\"\n    local GenericObjectPool = require \"GenericObjectPool\"\n    local ngx = ngx\n    local jwt = require \"resty.jwt\"\n    local cjson = require 'cjson'\n\n    local social_network_UserTimelineService = require 'social_network_UserTimelineService'\n    local UserTimelineServiceClient = social_network_UserTimelineService.social_network_UserTimelineService\n    local social_network_SocialGraphService = require 'social_network_SocialGraphService'\n    local SocialGraphServiceClient = social_network_SocialGraphService.SocialGraphServiceClient\n    local social_network_ComposePostService = require 'social_network_ComposePostService'\n    local ComposePostServiceClient = social_network_ComposePostService.ComposePostServiceClient\n    local social_network_UserService = require 'social_network_UserService'\n    local UserServiceClient = social_network_UserService.UserServiceClient\n\n\n    local config = ngx.shared.config;\n    config:set(\"secret\", \"secret\")\n    config:set(\"cookie_ttl\", 3600 * 24)\n    config:set(\"ssl\", false)\n  }\n\n  server {\n\n    # Checklist: Set up the port that nginx listens to.\n    listen       8080 reuseport;\n    server_name  localhost;\n\n    # Checklist: Turn of the access_log and error_log if you\n    # don't need them.\n    access_log  off;\n    # error_log off;\n\n    lua_need_request_body on;\n\n    # Used when SSL enabled\n    lua_ssl_trusted_certificate /keys/CA.pem;\n    lua_ssl_ciphers ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH;\n\n    # Checklist: Make sure that the location here is consistent\n    # with the location you specified in wrk2.\n    location /api/user/register {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/register\"\n          client.RegisterUser();\n      ';\n    }\n\n    location /api/user/follow {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/follow\"\n          client.Follow();\n      ';\n    }\n\n    location /api/user/unfollow {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/unfollow\"\n          client.Unfollow();\n      ';\n    }\n\n    location /api/user/login {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/login\"\n          client.Login();\n      ';\n    }\n\n    location /api/post/compose {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/post/compose\"\n          client.ComposePost();\n      ';\n    }\n\n    location /api/user-timeline/read {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user-timeline/read\"\n          client.ReadUserTimeline();\n      ';\n    }\n\n    location /api/home-timeline/read {\n            if ($request_method = 'OPTIONS') {\n              add_header 'Access-Control-Allow-Origin' '*';\n              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n              add_header 'Access-Control-Max-Age' 1728000;\n              add_header 'Content-Type' 'text/plain; charset=utf-8';\n              add_header 'Content-Length' 0;\n              return 204;\n            }\n            if ($request_method = 'POST') {\n              add_header 'Access-Control-Allow-Origin' '*';\n              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n              add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n            }\n            if ($request_method = 'GET') {\n              add_header 'Access-Control-Allow-Origin' '*';\n              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n              add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n            }\n      content_by_lua '\n          local client = require \"api/home-timeline/read\"\n          client.ReadHomeTimeline();\n      ';\n    }\n\n    # # get userinfo lua\n    # location /api/user/user_info {\n    #       if ($request_method = 'OPTIONS') {\n    #         add_header 'Access-Control-Allow-Origin' '*';\n    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n    #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n    #         add_header 'Access-Control-Max-Age' 1728000;\n    #         add_header 'Content-Type' 'text/plain; charset=utf-8';\n    #         add_header 'Content-Length' 0;\n    #         return 204;\n    #       }\n    #       if ($request_method = 'POST') {\n    #         add_header 'Access-Control-Allow-Origin' '*';\n    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n    #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n    #         add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n    #       }\n    #       if ($request_method = 'GET') {\n    #         add_header 'Access-Control-Allow-Origin' '*';\n    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n    #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n    #         add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n    #       }\n    #   content_by_lua '\n    #       local client = require \"api/user/user_info\"\n    #       client.UserInfo();\n    #   ';\n    # }\n    # get follower lua\n    location /api/user/get_follower {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/get_follower\"\n          client.GetFollower();\n      ';\n    }\n\n    # get followee lua\n    location /api/user/get_followee {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/get_followee\"\n          client.GetFollowee();\n      ';\n    }\n    location / {\n      if ($request_method = 'OPTIONS') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n        add_header 'Access-Control-Max-Age' 1728000;\n        add_header 'Content-Type' 'text/plain; charset=utf-8';\n        add_header 'Content-Length' 0;\n        return 204;\n      }\n      if ($request_method = 'POST') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n      }\n      if ($request_method = 'GET') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n      }\n      root pages;\n    }\n\n    location /wrk2-api/home-timeline/read {\n      content_by_lua '\n          local client = require \"wrk2-api/home-timeline/read\"\n          client.ReadHomeTimeline();\n      ';\n    }\n\n    location /wrk2-api/user-timeline/read {\n      content_by_lua '\n          local client = require \"wrk2-api/user-timeline/read\"\n          client.ReadUserTimeline();\n      ';\n    }\n\n    location /wrk2-api/post/compose {\n      content_by_lua '\n          local client = require \"wrk2-api/post/compose\"\n          client.ComposePost();\n      ';\n    }\n\n    location /wrk2-api/user/register {\n      content_by_lua '\n          local client = require \"wrk2-api/user/register\"\n          client.RegisterUser();\n      ';\n    }\n\n    location /wrk2-api/user/follow {\n      content_by_lua '\n          local client = require \"wrk2-api/user/follow\"\n          client.Follow();\n      ';\n    }\n\n    location /wrk2-api/user/unfollow {\n      content_by_lua '\n          local client = require \"wrk2-api/user/unfollow\"\n          client.Unfollow();\n      ';\n    }\n\n  }\n}\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"nginx-thrift"},"name":"nginx-thrift","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:11Z"
    labels:
      socialnetwork/service: nginx-thrift
    name: nginx-thrift
    namespace: default
    resourceVersion: "169525"
    uid: 4e86d971-1e22-4368-b797-bf2c34914f1e
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"post-storage-memcached"},"name":"post-storage-memcached","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:13Z"
    labels:
      socialnetwork/service: post-storage-memcached
    name: post-storage-memcached
    namespace: default
    resourceVersion: "169562"
    uid: 44b4d0fd-4cd5-4cba-befc-34004ded8c46
- apiVersion: v1
  data:
    mongod.conf: |
      net:
        tls:
          mode: disabled
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"mongod.conf":"net:\n  tls:\n    mode: disabled\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"post-storage-mongodb"},"name":"post-storage-mongodb","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:16Z"
    labels:
      socialnetwork/service: post-storage-mongodb
    name: post-storage-mongodb
    namespace: default
    resourceVersion: "169590"
    uid: 97fa9b7b-c0f5-41b6-8441-a0f607e585e9
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"post-storage-service"},"name":"post-storage-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:17Z"
    labels:
      socialnetwork/service: post-storage-service
    name: post-storage-service
    namespace: default
    resourceVersion: "169623"
    uid: fdc32ea0-c575-4e56-9869-321423e5444f
- apiVersion: v1
  data:
    mongod.conf: |
      net:
        tls:
          mode: disabled
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"mongod.conf":"net:\n  tls:\n    mode: disabled\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"social-graph-mongodb"},"name":"social-graph-mongodb","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:19Z"
    labels:
      socialnetwork/service: social-graph-mongodb
    name: social-graph-mongodb
    namespace: default
    resourceVersion: "169654"
    uid: 59719643-17e2-420b-8332-807388618084
- apiVersion: v1
  data:
    redis.conf: |
      io-threads 8
      io-threads-do-reads yes
      port 6379
      tls-port 0

      tls-cert-file /keys/server.crt
      tls-key-file /keys/server.key

      tls-auth-clients no
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"redis.conf":"io-threads 8\nio-threads-do-reads yes\nport 6379\ntls-port 0\n\ntls-cert-file /keys/server.crt\ntls-key-file /keys/server.key\n\ntls-auth-clients no\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"social-graph-redis"},"name":"social-graph-redis","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:22Z"
    labels:
      socialnetwork/service: social-graph-redis
    name: social-graph-redis
    namespace: default
    resourceVersion: "169692"
    uid: d51c177b-6adb-43e2-80de-434a79bb6c7e
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"social-graph-service"},"name":"social-graph-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:24Z"
    labels:
      socialnetwork/service: social-graph-service
    name: social-graph-service
    namespace: default
    resourceVersion: "169718"
    uid: 41b9c629-ac94-4609-83a7-04be560777ad
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"text-service"},"name":"text-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:27Z"
    labels:
      socialnetwork/service: text-service
    name: text-service
    namespace: default
    resourceVersion: "169755"
    uid: 947515cf-b630-4db6-b04f-a835b406ab61
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"unique-id-service"},"name":"unique-id-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:28Z"
    labels:
      socialnetwork/service: unique-id-service
    name: unique-id-service
    namespace: default
    resourceVersion: "169778"
    uid: fa708d70-a632-4b8c-a6e0-d6bf06801cb5
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"url-shorten-memcached"},"name":"url-shorten-memcached","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:31Z"
    labels:
      socialnetwork/service: url-shorten-memcached
    name: url-shorten-memcached
    namespace: default
    resourceVersion: "169820"
    uid: 4847e58b-afad-4bf7-9987-b9929b5acfed
- apiVersion: v1
  data:
    mongod.conf: |
      net:
        tls:
          mode: disabled
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"mongod.conf":"net:\n  tls:\n    mode: disabled\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"url-shorten-mongodb"},"name":"url-shorten-mongodb","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:34Z"
    labels:
      socialnetwork/service: url-shorten-mongodb
    name: url-shorten-mongodb
    namespace: default
    resourceVersion: "169847"
    uid: d4cc3aa6-d7ea-4a00-b3ae-c615eb379225
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"url-shorten-service"},"name":"url-shorten-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:36Z"
    labels:
      socialnetwork/service: url-shorten-service
    name: url-shorten-service
    namespace: default
    resourceVersion: "169880"
    uid: 95cf9b3c-a127-4bd3-b902-e407b0f4fe81
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"user-memcached"},"name":"user-memcached","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:39Z"
    labels:
      socialnetwork/service: user-memcached
    name: user-memcached
    namespace: default
    resourceVersion: "169914"
    uid: 3cfde620-4a52-4bd7-b3bf-31e7e9dc4704
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"user-mention-service"},"name":"user-mention-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:42Z"
    labels:
      socialnetwork/service: user-mention-service
    name: user-mention-service
    namespace: default
    resourceVersion: "169938"
    uid: 3efcee32-7313-4625-97bd-4173fa7600b0
- apiVersion: v1
  data:
    mongod.conf: |
      net:
        tls:
          mode: disabled
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"mongod.conf":"net:\n  tls:\n    mode: disabled\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"user-mongodb"},"name":"user-mongodb","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:44Z"
    labels:
      socialnetwork/service: user-mongodb
    name: user-mongodb
    namespace: default
    resourceVersion: "169968"
    uid: e62ab0b0-f896-46f9-93ee-b3b3b4508caa
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"user-service"},"name":"user-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:48Z"
    labels:
      socialnetwork/service: user-service
    name: user-service
    namespace: default
    resourceVersion: "170023"
    uid: 9c79d2ec-52cb-4391-8b0d-310f661635d9
- apiVersion: v1
  data:
    mongod.conf: |
      net:
        tls:
          mode: disabled
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"mongod.conf":"net:\n  tls:\n    mode: disabled\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"user-timeline-mongodb"},"name":"user-timeline-mongodb","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:51Z"
    labels:
      socialnetwork/service: user-timeline-mongodb
    name: user-timeline-mongodb
    namespace: default
    resourceVersion: "170064"
    uid: f8bf46b2-26d4-464a-a4a6-34550cdf910b
- apiVersion: v1
  data:
    redis.conf: |
      io-threads 8
      io-threads-do-reads yes
      port 6379
      tls-port 0

      tls-cert-file /keys/server.crt
      tls-key-file /keys/server.key

      tls-auth-clients no
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"redis.conf":"io-threads 8\nio-threads-do-reads yes\nport 6379\ntls-port 0\n\ntls-cert-file /keys/server.crt\ntls-key-file /keys/server.key\n\ntls-auth-clients no\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"user-timeline-redis"},"name":"user-timeline-redis","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:53Z"
    labels:
      socialnetwork/service: user-timeline-redis
    name: user-timeline-redis
    namespace: default
    resourceVersion: "170106"
    uid: 71fe1ecd-7860-4895-8145-518b921ffe87
- apiVersion: v1
  data:
    jaeger-config.yml: |
      disabled: true
      reporter:
        logSpans: false
        localAgentHostPort: "jaeger:6831"
        queueSize: 1000000
        bufferFlushInterval: 10
      sampler:
        type: "probabilistic"
        param: 0.01
    service-config.json: |
      {
          "secret": "secret",
          "social-graph-service": {
            "addr": "social-graph-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-mongodb": {
            "addr": "social-graph-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "social-graph-redis": {
            "addr": "social-graph-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-service": {
            "addr": "write-home-timeline-service",
            "port": 9090,
            "workers": 32,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "write-home-timeline-rabbitmq": {
            "addr": "write-home-timeline-rabbitmq",
            "port": 5672,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-redis": {
            "addr": "home-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-service": {
            "addr": "compose-post-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "compose-post-redis": {
            "addr": "compose-post-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-service": {
            "addr": "user-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-mongodb": {
            "addr": "user-timeline-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-timeline-redis": {
            "addr": "user-timeline-redis",
            "port": 6379,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-service": {
            "addr": "post-storage-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-mongodb": {
            "addr": "post-storage-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "post-storage-memcached": {
            "addr": "post-storage-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "unique-id-service": {
            "addr": "unique-id-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "media-service": {
            "addr": "media-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-mongodb": {
            "addr": "media-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-memcached": {
            "addr": "media-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "media-frontend": {
            "addr": "media-frontend",
            "port": 8081,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "text-service": {
            "addr": "text-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mention-service": {
            "addr": "user-mention-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-service": {
            "addr": "url-shorten-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-memcached": {
            "addr": "url-shorten-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "url-shorten-mongodb": {
            "addr": "url-shorten-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-service": {
            "addr": "user-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000,
            "netif": "eth0"
          },
          "user-memcached": {
            "addr": "user-memcached",
            "port": 11211,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "user-mongodb": {
            "addr": "user-mongodb",
            "port": 27017,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "home-timeline-service": {
            "addr": "home-timeline-service",
            "port": 9090,
            "connections": 512,
            "timeout_ms": 10000,
            "keepalive_ms": 10000
          },
          "ssl": {
            "enabled": false,
            "caPath": "/keys/CA.pem",
            "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
            "serverKeyPath": "/keys/server.key",
            "serverCertPath": "/keys/server.crt"
          }
        }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"jaeger-config.yml":"disabled: true\nreporter:\n  logSpans: false\n  localAgentHostPort: \"jaeger:6831\"\n  queueSize: 1000000\n  bufferFlushInterval: 10\nsampler:\n  type: \"probabilistic\"\n  param: 0.01\n","service-config.json":"{\n    \"secret\": \"secret\",\n    \"social-graph-service\": {\n      \"addr\": \"social-graph-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-mongodb\": {\n      \"addr\": \"social-graph-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"social-graph-redis\": {\n      \"addr\": \"social-graph-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-service\": {\n      \"addr\": \"write-home-timeline-service\",\n      \"port\": 9090,\n      \"workers\": 32,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"write-home-timeline-rabbitmq\": {\n      \"addr\": \"write-home-timeline-rabbitmq\",\n      \"port\": 5672,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-redis\": {\n      \"addr\": \"home-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-service\": {\n      \"addr\": \"compose-post-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"compose-post-redis\": {\n      \"addr\": \"compose-post-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-service\": {\n      \"addr\": \"user-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-mongodb\": {\n      \"addr\": \"user-timeline-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-timeline-redis\": {\n      \"addr\": \"user-timeline-redis\",\n      \"port\": 6379,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-service\": {\n      \"addr\": \"post-storage-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-mongodb\": {\n      \"addr\": \"post-storage-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"post-storage-memcached\": {\n      \"addr\": \"post-storage-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"unique-id-service\": {\n      \"addr\": \"unique-id-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"media-service\": {\n      \"addr\": \"media-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-mongodb\": {\n      \"addr\": \"media-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-memcached\": {\n      \"addr\": \"media-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"media-frontend\": {\n      \"addr\": \"media-frontend\",\n      \"port\": 8081,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"text-service\": {\n      \"addr\": \"text-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mention-service\": {\n      \"addr\": \"user-mention-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-service\": {\n      \"addr\": \"url-shorten-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-memcached\": {\n      \"addr\": \"url-shorten-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"url-shorten-mongodb\": {\n      \"addr\": \"url-shorten-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-service\": {\n      \"addr\": \"user-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000,\n      \"netif\": \"eth0\"\n    },\n    \"user-memcached\": {\n      \"addr\": \"user-memcached\",\n      \"port\": 11211,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"user-mongodb\": {\n      \"addr\": \"user-mongodb\",\n      \"port\": 27017,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"home-timeline-service\": {\n      \"addr\": \"home-timeline-service\",\n      \"port\": 9090,\n      \"connections\": 512,\n      \"timeout_ms\": 10000,\n      \"keepalive_ms\": 10000\n    },\n    \"ssl\": {\n      \"enabled\": false,\n      \"caPath\": \"/keys/CA.pem\",\n      \"ciphers\": \"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\",\n      \"serverKeyPath\": \"/keys/server.key\",\n      \"serverCertPath\": \"/keys/server.crt\"\n    }\n  }\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"socialnetwork/service":"user-timeline-service"},"name":"user-timeline-service","namespace":"default"}}
    creationTimestamp: "2022-08-26T06:36:57Z"
    labels:
      socialnetwork/service: user-timeline-service
    name: user-timeline-service
    namespace: default
    resourceVersion: "170134"
    uid: 7890aac1-63b5-4789-be54-f162897cd004
kind: List
metadata: {}
---
