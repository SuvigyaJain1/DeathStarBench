<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="902.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="885" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="885" > </text>
<g id="frames">
<g >
<title>Envoy::Network::IoSocketHandleImpl::writev(Envoy::Buffer::RawSlice const*, unsigned long) (1 samples, 5.26%)</title><rect x="1065.8" y="645" width="62.1" height="15.0" fill="rgb(223,98,29)" rx="2" ry="2" />
<text  x="1068.79" y="655.5" >Envoy:..</text>
</g>
<g >
<title>do_iter_write (1 samples, 5.26%)</title><rect x="693.2" y="517" width="62.1" height="15.0" fill="rgb(210,60,19)" rx="2" ry="2" />
<text  x="696.16" y="527.5" >do_ite..</text>
</g>
<g >
<title>vfs_writev (1 samples, 5.26%)</title><rect x="1065.8" y="533" width="62.1" height="15.0" fill="rgb(244,117,22)" rx="2" ry="2" />
<text  x="1068.79" y="543.5" >vfs_wr..</text>
</g>
<g >
<title>tcp_write_xmit (1 samples, 5.26%)</title><rect x="693.2" y="373" width="62.1" height="15.0" fill="rgb(226,30,15)" rx="2" ry="2" />
<text  x="696.16" y="383.5" >tcp_wr..</text>
</g>
<g >
<title>hist_approx_quantile (1 samples, 5.26%)</title><rect x="320.5" y="613" width="62.1" height="15.0" fill="rgb(222,222,9)" rx="2" ry="2" />
<text  x="323.53" y="623.5" >hist_a..</text>
</g>
<g >
<title>event_process_active_single_queue (3 samples, 15.79%)</title><rect x="1003.7" y="757" width="186.3" height="15.0" fill="rgb(206,16,17)" rx="2" ry="2" />
<text  x="1006.68" y="767.5" >event_process_active_sin..</text>
</g>
<g >
<title>Envoy::Event::DispatcherImpl::runPostCallbacks() (2 samples, 10.53%)</title><rect x="258.4" y="709" width="124.2" height="15.0" fill="rgb(228,69,26)" rx="2" ry="2" />
<text  x="261.42" y="719.5" >Envoy::Event::D..</text>
</g>
<g >
<title>epoll_wait (2 samples, 10.53%)</title><rect x="879.5" y="757" width="124.2" height="15.0" fill="rgb(217,158,21)" rx="2" ry="2" />
<text  x="882.47" y="767.5" >epoll_wait</text>
</g>
<g >
<title>TCMallocImplementation::GetNumericProperty(char const*, unsigned long*) (1 samples, 5.26%)</title><rect x="258.4" y="613" width="62.1" height="15.0" fill="rgb(221,94,13)" rx="2" ry="2" />
<text  x="261.42" y="623.5" >TCMall..</text>
</g>
<g >
<title>Envoy::Server::InstanceImpl::run() (4 samples, 21.05%)</title><rect x="134.2" y="757" width="248.4" height="15.0" fill="rgb(218,52,52)" rx="2" ry="2" />
<text  x="137.21" y="767.5" >Envoy::Server::InstanceImpl::run()</text>
</g>
<g >
<title>schedule_hrtimeout_range (2 samples, 10.53%)</title><rect x="879.5" y="645" width="124.2" height="15.0" fill="rgb(236,71,49)" rx="2" ry="2" />
<text  x="882.47" y="655.5" >schedule_hrtime..</text>
</g>
<g >
<title>tcp_push (1 samples, 5.26%)</title><rect x="693.2" y="405" width="62.1" height="15.0" fill="rgb(219,93,16)" rx="2" ry="2" />
<text  x="696.16" y="415.5" >tcp_push</text>
</g>
<g >
<title>release_sock (1 samples, 5.26%)</title><rect x="1065.8" y="421" width="62.1" height="15.0" fill="rgb(210,102,39)" rx="2" ry="2" />
<text  x="1068.79" y="431.5" >releas..</text>
</g>
<g >
<title>Envoy::Extensions::Upstreams::Http::Http::HttpConnPool::HttpConnPool(Envoy::Upstream::ThreadLocalCluster&amp;, bool, Envoy::Router::RouteEntry const&amp;, absl::optional&lt;Envoy::Http::Protocol&gt;, Envoy::Upstream::LoadBalancerContext*) (1 samples, 5.26%)</title><rect x="1003.7" y="437" width="62.1" height="15.0" fill="rgb(220,159,44)" rx="2" ry="2" />
<text  x="1006.68" y="447.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Http::ConnectionManagerImpl::ConnectionManagerImpl(Envoy::Http::ConnectionManagerConfig&amp;, Envoy::Network::DrainDecision const&amp;, Envoy::Random::RandomGenerator&amp;, Envoy::Http::Context&amp;, Envoy::Runtime::Loader&amp;, Envoy::LocalInfo::LocalInfo const&amp;, Envoy::Upstream::ClusterManager&amp;, Envoy::Server::OverloadManager&amp;, Envoy::TimeSource&amp;) (1 samples, 5.26%)</title><rect x="1127.9" y="581" width="62.1" height="15.0" fill="rgb(242,164,22)" rx="2" ry="2" />
<text  x="1130.89" y="591.5" >Envoy:..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 10.53%)</title><rect x="879.5" y="725" width="124.2" height="15.0" fill="rgb(236,49,23)" rx="2" ry="2" />
<text  x="882.47" y="735.5" >entry_SYSCALL_6..</text>
</g>
<g >
<title>schedule_hrtimeout_range (2 samples, 10.53%)</title><rect x="506.8" y="645" width="124.3" height="15.0" fill="rgb(245,35,16)" rx="2" ry="2" />
<text  x="509.84" y="655.5" >schedule_hrtime..</text>
</g>
<g >
<title>__libc_start_main (4 samples, 21.05%)</title><rect x="134.2" y="821" width="248.4" height="15.0" fill="rgb(250,132,54)" rx="2" ry="2" />
<text  x="137.21" y="831.5" >__libc_start_main</text>
</g>
<g >
<title>kfree (1 samples, 5.26%)</title><rect x="1065.8" y="261" width="62.1" height="15.0" fill="rgb(208,166,5)" rx="2" ry="2" />
<text  x="1068.79" y="271.5" >kfree</text>
</g>
<g >
<title>Envoy::Network::TcpListenerImpl::onSocketEvent(short) (1 samples, 5.26%)</title><rect x="1127.9" y="709" width="62.1" height="15.0" fill="rgb(217,100,46)" rx="2" ry="2" />
<text  x="1130.89" y="719.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Server::ActiveTcpSocket::newConnection() (1 samples, 5.26%)</title><rect x="1127.9" y="645" width="62.1" height="15.0" fill="rgb(244,97,48)" rx="2" ry="2" />
<text  x="1130.89" y="655.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Server::Configuration::FilterChainUtility::buildFilterChain(Envoy::Network::FilterManager&amp;, std::__1::vector&lt;std::__1::function&lt;void (Envoy::Network::FilterManager&amp;)&gt;, std::__1::allocator&lt;std::__1::function&lt;void (Envoy::Network::FilterManager&amp;)&gt; &gt; &gt; const&amp;) (1 samples, 5.26%)</title><rect x="1127.9" y="613" width="62.1" height="15.0" fill="rgb(219,137,10)" rx="2" ry="2" />
<text  x="1130.89" y="623.5" >Envoy:..</text>
</g>
<g >
<title>do_epoll_wait (3 samples, 15.79%)</title><rect x="444.7" y="677" width="186.4" height="15.0" fill="rgb(239,13,44)" rx="2" ry="2" />
<text  x="447.74" y="687.5" >do_epoll_wait</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 5.26%)</title><rect x="693.2" y="181" width="62.1" height="15.0" fill="rgb(241,79,53)" rx="2" ry="2" />
<text  x="696.16" y="191.5" >__soft..</text>
</g>
<g >
<title>start_thread (5 samples, 26.32%)</title><rect x="879.5" y="821" width="310.5" height="15.0" fill="rgb(211,225,44)" rx="2" ry="2" />
<text  x="882.47" y="831.5" >start_thread</text>
</g>
<g >
<title>ExtractStats(TCMallocStats*, unsigned long*, tcmalloc::PageHeap::SmallSpanStats*, tcmalloc::PageHeap::LargeSpanStats*) (1 samples, 5.26%)</title><rect x="258.4" y="597" width="62.1" height="15.0" fill="rgb(212,166,47)" rx="2" ry="2" />
<text  x="261.42" y="607.5" >Extrac..</text>
</g>
<g >
<title>Envoy::Stats::ParentHistogramImpl::merge() (1 samples, 5.26%)</title><rect x="320.5" y="645" width="62.1" height="15.0" fill="rgb(213,58,27)" rx="2" ry="2" />
<text  x="323.53" y="655.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Stats::HistogramStatisticsImpl::refresh(histogram const*) (1 samples, 5.26%)</title><rect x="320.5" y="629" width="62.1" height="15.0" fill="rgb(229,162,39)" rx="2" ry="2" />
<text  x="323.53" y="639.5" >Envoy:..</text>
</g>
<g >
<title>ip_output (1 samples, 5.26%)</title><rect x="693.2" y="293" width="62.1" height="15.0" fill="rgb(249,139,16)" rx="2" ry="2" />
<text  x="696.16" y="303.5" >ip_out..</text>
</g>
<g >
<title>Envoy::Network::RawBufferSocket::doWrite(Envoy::Buffer::Instance&amp;, bool) (1 samples, 5.26%)</title><rect x="755.3" y="677" width="62.1" height="15.0" fill="rgb(223,129,46)" rx="2" ry="2" />
<text  x="758.26" y="687.5" >Envoy:..</text>
</g>
<g >
<title>sock_sendmsg (1 samples, 5.26%)</title><rect x="693.2" y="469" width="62.1" height="15.0" fill="rgb(224,76,52)" rx="2" ry="2" />
<text  x="696.16" y="479.5" >sock_s..</text>
</g>
<g >
<title>ep_scan_ready_list.constprop.0 (1 samples, 5.26%)</title><rect x="444.7" y="645" width="62.1" height="15.0" fill="rgb(247,47,19)" rx="2" ry="2" />
<text  x="447.74" y="655.5" >ep_sca..</text>
</g>
<g >
<title>start_thread (6 samples, 31.58%)</title><rect x="444.7" y="821" width="372.7" height="15.0" fill="rgb(231,76,23)" rx="2" ry="2" />
<text  x="447.74" y="831.5" >start_thread</text>
</g>
<g >
<title>ip_queue_xmit (1 samples, 5.26%)</title><rect x="693.2" y="341" width="62.1" height="15.0" fill="rgb(209,65,35)" rx="2" ry="2" />
<text  x="696.16" y="351.5" >ip_que..</text>
</g>
<g >
<title>tcmalloc::CentralFreeList::tc_length() (1 samples, 5.26%)</title><rect x="258.4" y="581" width="62.1" height="15.0" fill="rgb(208,181,31)" rx="2" ry="2" />
<text  x="261.42" y="591.5" >tcmall..</text>
</g>
<g >
<title>Envoy::Network::ConnectionImpl::onWriteReady() (1 samples, 5.26%)</title><rect x="1065.8" y="693" width="62.1" height="15.0" fill="rgb(211,204,25)" rx="2" ry="2" />
<text  x="1068.79" y="703.5" >Envoy:..</text>
</g>
<g >
<title>__ip_finish_output (1 samples, 5.26%)</title><rect x="693.2" y="261" width="62.1" height="15.0" fill="rgb(212,61,43)" rx="2" ry="2" />
<text  x="696.16" y="271.5" >__ip_f..</text>
</g>
<g >
<title>tcp_rcv_established (1 samples, 5.26%)</title><rect x="1065.8" y="373" width="62.1" height="15.0" fill="rgb(232,207,29)" rx="2" ry="2" />
<text  x="1068.79" y="383.5" >tcp_rc..</text>
</g>
<g >
<title>do_iter_readv_writev (1 samples, 5.26%)</title><rect x="1065.8" y="501" width="62.1" height="15.0" fill="rgb(225,65,50)" rx="2" ry="2" />
<text  x="1068.79" y="511.5" >do_ite..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 5.26%)</title><rect x="1065.8" y="581" width="62.1" height="15.0" fill="rgb(211,189,26)" rx="2" ry="2" />
<text  x="1068.79" y="591.5" >do_sys..</text>
</g>
<g >
<title>std::__1::__function::__func&lt;Envoy::Event::DispatcherImpl::createFileEvent(int, std::__1::function&lt;void (unsigned int)&gt;, Envoy::Event::FileTriggerType, unsigned int)::$_5, std::__1::allocator&lt;Envoy::Event::DispatcherImpl::createFileEvent(int, std::__1::function&lt;void (unsigned int)&gt;, Envoy::Event::FileTriggerType, unsigned int)::$_5&gt;, void (unsigned int)&gt;::operator()(unsigned int&amp;&amp;) (2 samples, 10.53%)</title><rect x="631.1" y="725" width="124.2" height="15.0" fill="rgb(239,101,43)" rx="2" ry="2" />
<text  x="634.05" y="735.5" >std::__1::__fun..</text>
</g>
<g >
<title>Envoy::Thread::ThreadImplPosix::ThreadImplPosix(std::__1::function&lt;void ()&gt;, absl::optional&lt;Envoy::Thread::Options&gt; const&amp;)::{lambda(void*)#1}::__invoke(void*) (5 samples, 26.32%)</title><rect x="879.5" y="805" width="310.5" height="15.0" fill="rgb(214,185,48)" rx="2" ry="2" />
<text  x="882.47" y="815.5" >Envoy::Thread::ThreadImplPosix::ThreadImp..</text>
</g>
<g >
<title>Envoy::Router::Filter::createConnPool(Envoy::Upstream::ThreadLocalCluster&amp;) (1 samples, 5.26%)</title><rect x="1003.7" y="469" width="62.1" height="15.0" fill="rgb(232,75,8)" rx="2" ry="2" />
<text  x="1006.68" y="479.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Event::FileEventImpl::assignEvents(unsigned int, event_base*)::$_1::__invoke(int, short, void*) (2 samples, 10.53%)</title><rect x="631.1" y="741" width="124.2" height="15.0" fill="rgb(246,186,42)" rx="2" ry="2" />
<text  x="634.05" y="751.5" >Envoy::Event::F..</text>
</g>
<g >
<title>Envoy::Server::InstanceImpl::updateServerStats() (1 samples, 5.26%)</title><rect x="258.4" y="645" width="62.1" height="15.0" fill="rgb(243,15,8)" rx="2" ry="2" />
<text  x="261.42" y="655.5" >Envoy:..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 5.26%)</title><rect x="1065.8" y="597" width="62.1" height="15.0" fill="rgb(218,195,11)" rx="2" ry="2" />
<text  x="1068.79" y="607.5" >entry_..</text>
</g>
<g >
<title>__netif_receive_skb (1 samples, 5.26%)</title><rect x="693.2" y="133" width="62.1" height="15.0" fill="rgb(216,51,3)" rx="2" ry="2" />
<text  x="696.16" y="143.5" >__neti..</text>
</g>
<g >
<title>- (2 samples, 10.53%)</title><rect x="879.5" y="741" width="124.2" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="882.47" y="751.5" >-</text>
</g>
<g >
<title>vfs_writev (1 samples, 5.26%)</title><rect x="693.2" y="533" width="62.1" height="15.0" fill="rgb(237,83,21)" rx="2" ry="2" />
<text  x="696.16" y="543.5" >vfs_wr..</text>
</g>
<g >
<title>__x64_sys_writev (1 samples, 5.26%)</title><rect x="1065.8" y="565" width="62.1" height="15.0" fill="rgb(245,163,42)" rx="2" ry="2" />
<text  x="1068.79" y="575.5" >__x64_..</text>
</g>
<g >
<title>ep_poll (2 samples, 10.53%)</title><rect x="879.5" y="661" width="124.2" height="15.0" fill="rgb(248,229,21)" rx="2" ry="2" />
<text  x="882.47" y="671.5" >ep_poll</text>
</g>
<g >
<title>std::__1::__function::__func&lt;Envoy::Event::DispatcherImpl::createFileEvent(int, std::__1::function&lt;void (unsigned int)&gt;, Envoy::Event::FileTriggerType, unsigned int)::$_5, std::__1::allocator&lt;Envoy::Event::DispatcherImpl::createFileEvent(int, std::__1::function&lt;void (unsigned int)&gt;, Envoy::Event::FileTriggerType, unsigned int)::$_5&gt;, void (unsigned int)&gt;::operator()(unsigned int&amp;&amp;) (3 samples, 15.79%)</title><rect x="1003.7" y="725" width="186.3" height="15.0" fill="rgb(215,101,9)" rx="2" ry="2" />
<text  x="1006.68" y="735.5" >std::__1::__function::__..</text>
</g>
<g >
<title>tcp_sendmsg (1 samples, 5.26%)</title><rect x="693.2" y="437" width="62.1" height="15.0" fill="rgb(231,98,0)" rx="2" ry="2" />
<text  x="696.16" y="447.5" >tcp_se..</text>
</g>
<g >
<title>do_syscall_64 (3 samples, 15.79%)</title><rect x="444.7" y="709" width="186.4" height="15.0" fill="rgb(230,21,7)" rx="2" ry="2" />
<text  x="447.74" y="719.5" >do_syscall_64</text>
</g>
<g >
<title>Envoy::Http::ConnectionManagerImpl::ActiveStream::decodeHeaders(std::__1::unique_ptr&lt;Envoy::Http::RequestHeaderMap, std::__1::default_delete&lt;Envoy::Http::RequestHeaderMap&gt; &gt;&amp;&amp;, bool) (1 samples, 5.26%)</title><rect x="1003.7" y="517" width="62.1" height="15.0" fill="rgb(222,114,32)" rx="2" ry="2" />
<text  x="1006.68" y="527.5" >Envoy:..</text>
</g>
<g >
<title>ip_rcv (1 samples, 5.26%)</title><rect x="693.2" y="101" width="62.1" height="15.0" fill="rgb(207,118,12)" rx="2" ry="2" />
<text  x="696.16" y="111.5" >ip_rcv</text>
</g>
<g >
<title>envoy (5 samples, 26.32%)</title><rect x="134.2" y="837" width="310.5" height="15.0" fill="rgb(225,53,12)" rx="2" ry="2" />
<text  x="137.21" y="847.5" >envoy</text>
</g>
<g >
<title>finish_task_switch (2 samples, 10.53%)</title><rect x="879.5" y="565" width="124.2" height="15.0" fill="rgb(249,95,23)" rx="2" ry="2" />
<text  x="882.47" y="575.5" >finish_task_swi..</text>
</g>
<g >
<title>Envoy::Network::ConnectionImpl::onWriteReady() (1 samples, 5.26%)</title><rect x="755.3" y="693" width="62.1" height="15.0" fill="rgb(225,57,3)" rx="2" ry="2" />
<text  x="758.26" y="703.5" >Envoy:..</text>
</g>
<g >
<title>std::__1::__function::__func&lt;Envoy::Extensions::NetworkFilters::HttpConnectionManager::HttpConnectionManagerFilterConfigFactory::createFilterFactoryFromProtoAndHopByHop(envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager const&amp;, Envoy::Server::Configuration::FactoryContext&amp;, bool)::$_7, std::__1::allocator&lt;Envoy::Extensions::NetworkFilters::HttpConnectionManager::HttpConnectionManagerFilterConfigFactory::createFilterFactoryFromProtoAndHopByHop(envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager const&amp;, Envoy::Server::Configuration::FactoryContext&amp;, bool)::$_7&gt;, void (Envoy::Network::FilterManager&amp;)&gt;::operator()(Envoy::Network::FilterManager&amp;) (1 samples, 5.26%)</title><rect x="1127.9" y="597" width="62.1" height="15.0" fill="rgb(207,156,32)" rx="2" ry="2" />
<text  x="1130.89" y="607.5" >std::_..</text>
</g>
<g >
<title>dog:main_thread (2 samples, 10.53%)</title><rect x="10.0" y="837" width="124.2" height="15.0" fill="rgb(208,87,11)" rx="2" ry="2" />
<text  x="13.00" y="847.5" >dog:main_thread</text>
</g>
<g >
<title>Envoy::Http::Http1::ConnectionImpl::dispatchSlice(char const*, unsigned long) (1 samples, 5.26%)</title><rect x="1003.7" y="613" width="62.1" height="15.0" fill="rgb(237,184,28)" rx="2" ry="2" />
<text  x="1006.68" y="623.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Memory::Stats::totalCurrentlyAllocated() (1 samples, 5.26%)</title><rect x="258.4" y="629" width="62.1" height="15.0" fill="rgb(213,219,7)" rx="2" ry="2" />
<text  x="261.42" y="639.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Upstream::ClusterManagerImpl::ThreadLocalClusterManagerImpl::ClusterEntry::httpConnPoolImpl(Envoy::Upstream::ResourcePriority, absl::optional&lt;Envoy::Http::Protocol&gt;, Envoy::Upstream::LoadBalancerContext*, bool) (1 samples, 5.26%)</title><rect x="1003.7" y="405" width="62.1" height="15.0" fill="rgb(211,92,20)" rx="2" ry="2" />
<text  x="1006.68" y="415.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Network::IoSocketHandleImpl::writev(Envoy::Buffer::RawSlice const*, unsigned long) (1 samples, 5.26%)</title><rect x="693.2" y="645" width="62.1" height="15.0" fill="rgb(216,12,51)" rx="2" ry="2" />
<text  x="696.16" y="655.5" >Envoy:..</text>
</g>
<g >
<title>std::__1::__function::__func&lt;Envoy::Event::DispatcherImpl::createFileEvent(int, std::__1::function&lt;void (unsigned int)&gt;, Envoy::Event::FileTriggerType, unsigned int)::$_5, std::__1::allocator&lt;Envoy::Event::DispatcherImpl::createFileEvent(int, std::__1::function&lt;void (unsigned int)&gt;, Envoy::Event::FileTriggerType, unsigned int)::$_5&gt;, void (unsigned int)&gt;::operator()(unsigned int&amp;&amp;) (1 samples, 5.26%)</title><rect x="755.3" y="725" width="62.1" height="15.0" fill="rgb(237,31,45)" rx="2" ry="2" />
<text  x="758.26" y="735.5" >std::_..</text>
</g>
<g >
<title>event_base_loop (2 samples, 10.53%)</title><rect x="10.0" y="773" width="124.2" height="15.0" fill="rgb(242,45,9)" rx="2" ry="2" />
<text  x="13.00" y="783.5" >event_base_loop</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 10.53%)</title><rect x="879.5" y="709" width="124.2" height="15.0" fill="rgb(227,148,0)" rx="2" ry="2" />
<text  x="882.47" y="719.5" >do_syscall_64</text>
</g>
<g >
<title>start_thread (2 samples, 10.53%)</title><rect x="10.0" y="821" width="124.2" height="15.0" fill="rgb(233,162,31)" rx="2" ry="2" />
<text  x="13.00" y="831.5" >start_thread</text>
</g>
<g >
<title>ip_local_out (1 samples, 5.26%)</title><rect x="693.2" y="309" width="62.1" height="15.0" fill="rgb(248,149,36)" rx="2" ry="2" />
<text  x="696.16" y="319.5" >ip_loc..</text>
</g>
<g >
<title>ep_send_events_proc (1 samples, 5.26%)</title><rect x="444.7" y="629" width="62.1" height="15.0" fill="rgb(217,25,13)" rx="2" ry="2" />
<text  x="447.74" y="639.5" >ep_sen..</text>
</g>
<g >
<title>ep_poll (3 samples, 15.79%)</title><rect x="444.7" y="661" width="186.4" height="15.0" fill="rgb(243,179,36)" rx="2" ry="2" />
<text  x="447.74" y="671.5" >ep_poll</text>
</g>
<g >
<title>Envoy::Logger::Context::useFancyLogger() (1 samples, 5.26%)</title><rect x="631.1" y="693" width="62.1" height="15.0" fill="rgb(253,226,15)" rx="2" ry="2" />
<text  x="634.05" y="703.5" >Envoy:..</text>
</g>
<g >
<title>all (19 samples, 100%)</title><rect x="10.0" y="853" width="1180.0" height="15.0" fill="rgb(216,99,24)" rx="2" ry="2" />
<text  x="13.00" y="863.5" ></text>
</g>
<g >
<title>Envoy::MainCommonBase::run() (4 samples, 21.05%)</title><rect x="134.2" y="773" width="248.4" height="15.0" fill="rgb(225,219,45)" rx="2" ry="2" />
<text  x="137.21" y="783.5" >Envoy::MainCommonBase::run()</text>
</g>
<g >
<title>Envoy::Thread::ThreadImplPosix::ThreadImplPosix(std::__1::function&lt;void ()&gt;, absl::optional&lt;Envoy::Thread::Options&gt; const&amp;)::{lambda(void*)#1}::__invoke(void*) (2 samples, 10.53%)</title><rect x="10.0" y="805" width="124.2" height="15.0" fill="rgb(245,6,8)" rx="2" ry="2" />
<text  x="13.00" y="815.5" >Envoy::Thread::..</text>
</g>
<g >
<title>http_parser_execute (1 samples, 5.26%)</title><rect x="1003.7" y="581" width="62.1" height="15.0" fill="rgb(231,94,44)" rx="2" ry="2" />
<text  x="1006.68" y="591.5" >http_p..</text>
</g>
<g >
<title>wrk:worker_1 (6 samples, 31.58%)</title><rect x="817.4" y="837" width="372.6" height="15.0" fill="rgb(207,63,28)" rx="2" ry="2" />
<text  x="820.37" y="847.5" >wrk:worker_1</text>
</g>
<g >
<title>finish_task_switch (2 samples, 10.53%)</title><rect x="506.8" y="565" width="124.3" height="15.0" fill="rgb(208,75,39)" rx="2" ry="2" />
<text  x="509.84" y="575.5" >finish_task_swi..</text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 5.26%)</title><rect x="693.2" y="197" width="62.1" height="15.0" fill="rgb(208,156,53)" rx="2" ry="2" />
<text  x="696.16" y="207.5" >do_sof..</text>
</g>
<g >
<title>inet_sendmsg (1 samples, 5.26%)</title><rect x="1065.8" y="453" width="62.1" height="15.0" fill="rgb(249,159,17)" rx="2" ry="2" />
<text  x="1068.79" y="463.5" >inet_s..</text>
</g>
<g >
<title>wrk:worker_0 (6 samples, 31.58%)</title><rect x="444.7" y="837" width="372.7" height="15.0" fill="rgb(228,93,16)" rx="2" ry="2" />
<text  x="447.74" y="847.5" >wrk:worker_0</text>
</g>
<g >
<title>Envoy::Server::ActiveStreamListenerBase::newConnection(std::__1::unique_ptr&lt;Envoy::Network::ConnectionSocket, std::__1::default_delete&lt;Envoy::Network::ConnectionSocket&gt; &gt;&amp;&amp;, std::__1::unique_ptr&lt;Envoy::StreamInfo::StreamInfo, std::__1::default_delete&lt;Envoy::StreamInfo::StreamInfo&gt; &gt;) (1 samples, 5.26%)</title><rect x="1127.9" y="629" width="62.1" height="15.0" fill="rgb(240,170,46)" rx="2" ry="2" />
<text  x="1130.89" y="639.5" >Envoy:..</text>
</g>
<g >
<title>__schedule (2 samples, 10.53%)</title><rect x="879.5" y="597" width="124.2" height="15.0" fill="rgb(209,140,41)" rx="2" ry="2" />
<text  x="882.47" y="607.5" >__schedule</text>
</g>
<g >
<title>schedule (2 samples, 10.53%)</title><rect x="879.5" y="613" width="124.2" height="15.0" fill="rgb(218,87,43)" rx="2" ry="2" />
<text  x="882.47" y="623.5" >schedule</text>
</g>
<g >
<title>__tcp_transmit_skb (1 samples, 5.26%)</title><rect x="693.2" y="357" width="62.1" height="15.0" fill="rgb(254,207,27)" rx="2" ry="2" />
<text  x="696.16" y="367.5" >__tcp_..</text>
</g>
<g >
<title>Envoy::Server::WorkerImpl::threadRoutine(Envoy::Server::GuardDog&amp;, std::__1::function&lt;void ()&gt; const&amp;) (5 samples, 26.32%)</title><rect x="879.5" y="789" width="310.5" height="15.0" fill="rgb(246,78,48)" rx="2" ry="2" />
<text  x="882.47" y="799.5" >Envoy::Server::WorkerImpl::threadRoutine(..</text>
</g>
<g >
<title>- (3 samples, 15.79%)</title><rect x="444.7" y="741" width="186.4" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="447.74" y="751.5" >-</text>
</g>
<g >
<title>main (4 samples, 21.05%)</title><rect x="134.2" y="805" width="248.4" height="15.0" fill="rgb(223,207,20)" rx="2" ry="2" />
<text  x="137.21" y="815.5" >main</text>
</g>
<g >
<title>net_rx_action (1 samples, 5.26%)</title><rect x="693.2" y="165" width="62.1" height="15.0" fill="rgb(239,108,45)" rx="2" ry="2" />
<text  x="696.16" y="175.5" >net_rx..</text>
</g>
<g >
<title>ip_finish_output2 (1 samples, 5.26%)</title><rect x="693.2" y="245" width="62.1" height="15.0" fill="rgb(253,78,44)" rx="2" ry="2" />
<text  x="696.16" y="255.5" >ip_fin..</text>
</g>
<g >
<title>__x64_sys_epoll_wait (2 samples, 10.53%)</title><rect x="879.5" y="693" width="124.2" height="15.0" fill="rgb(223,176,3)" rx="2" ry="2" />
<text  x="882.47" y="703.5" >__x64_sys_epoll..</text>
</g>
<g >
<title>clock_gettime (1 samples, 5.26%)</title><rect x="382.6" y="821" width="62.1" height="15.0" fill="rgb(209,155,46)" rx="2" ry="2" />
<text  x="385.63" y="831.5" >clock_..</text>
</g>
<g >
<title>skb_release_all (1 samples, 5.26%)</title><rect x="1065.8" y="325" width="62.1" height="15.0" fill="rgb(223,215,10)" rx="2" ry="2" />
<text  x="1068.79" y="335.5" >skb_re..</text>
</g>
<g >
<title>Envoy::Server::InstanceImpl::flushStatsInternal() (1 samples, 5.26%)</title><rect x="258.4" y="661" width="62.1" height="15.0" fill="rgb(235,196,36)" rx="2" ry="2" />
<text  x="261.42" y="671.5" >Envoy:..</text>
</g>
<g >
<title>iptable_raw_hook (1 samples, 5.26%)</title><rect x="693.2" y="69" width="62.1" height="15.0" fill="rgb(211,166,19)" rx="2" ry="2" />
<text  x="696.16" y="79.5" >iptabl..</text>
</g>
<g >
<title>Envoy::Thread::ThreadImplPosix::ThreadImplPosix(std::__1::function&lt;void ()&gt;, absl::optional&lt;Envoy::Thread::Options&gt; const&amp;)::{lambda(void*)#1}::__invoke(void*) (6 samples, 31.58%)</title><rect x="444.7" y="805" width="372.7" height="15.0" fill="rgb(216,90,17)" rx="2" ry="2" />
<text  x="447.74" y="815.5" >Envoy::Thread::ThreadImplPosix::ThreadImplPosix(st..</text>
</g>
<g >
<title>do_iter_write (1 samples, 5.26%)</title><rect x="1065.8" y="517" width="62.1" height="15.0" fill="rgb(210,91,25)" rx="2" ry="2" />
<text  x="1068.79" y="527.5" >do_ite..</text>
</g>
<g >
<title>Envoy::Extensions::Upstreams::Http::Generic::GenericGenericConnPoolFactory::createGenericConnPool(Envoy::Upstream::ThreadLocalCluster&amp;, bool, Envoy::Router::RouteEntry const&amp;, absl::optional&lt;Envoy::Http::Protocol&gt;, Envoy::Upstream::LoadBalancerContext*) const (1 samples, 5.26%)</title><rect x="1003.7" y="453" width="62.1" height="15.0" fill="rgb(248,59,5)" rx="2" ry="2" />
<text  x="1006.68" y="463.5" >Envoy:..</text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 5.26%)</title><rect x="1065.8" y="389" width="62.1" height="15.0" fill="rgb(239,124,54)" rx="2" ry="2" />
<text  x="1068.79" y="399.5" >tcp_v4..</text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 5.26%)</title><rect x="693.2" y="229" width="62.1" height="15.0" fill="rgb(224,170,16)" rx="2" ry="2" />
<text  x="696.16" y="239.5" >__loca..</text>
</g>
<g >
<title>Envoy::Http::ConnectionManagerImpl::onData(Envoy::Buffer::Instance&amp;, bool) (1 samples, 5.26%)</title><rect x="1003.7" y="661" width="62.1" height="15.0" fill="rgb(241,163,30)" rx="2" ry="2" />
<text  x="1006.68" y="671.5" >Envoy:..</text>
</g>
<g >
<title>std::__1::__function::__func&lt;Envoy::Server::GuardDogImpl::start(Envoy::Api::Api&amp;)::$_4, std::__1::allocator&lt;Envoy::Server::GuardDogImpl::start(Envoy::Api::Api&amp;)::$_4&gt;, void ()&gt;::operator()() (2 samples, 10.53%)</title><rect x="10.0" y="789" width="124.2" height="15.0" fill="rgb(214,124,4)" rx="2" ry="2" />
<text  x="13.00" y="799.5" >std::__1::__fun..</text>
</g>
<g >
<title>__release_sock (1 samples, 5.26%)</title><rect x="1065.8" y="405" width="62.1" height="15.0" fill="rgb(210,100,51)" rx="2" ry="2" />
<text  x="1068.79" y="415.5" >__rele..</text>
</g>
<g >
<title>Envoy::Network::ConnectionImpl::onWriteReady() (1 samples, 5.26%)</title><rect x="693.2" y="693" width="62.1" height="15.0" fill="rgb(229,148,27)" rx="2" ry="2" />
<text  x="696.16" y="703.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Event::FileEventImpl::assignEvents(unsigned int, event_base*)::$_1::__invoke(int, short, void*) (3 samples, 15.79%)</title><rect x="1003.7" y="741" width="186.3" height="15.0" fill="rgb(247,80,49)" rx="2" ry="2" />
<text  x="1006.68" y="751.5" >Envoy::Event::FileEventI..</text>
</g>
<g >
<title>Envoy::Server::WorkerImpl::threadRoutine(Envoy::Server::GuardDog&amp;, std::__1::function&lt;void ()&gt; const&amp;) (6 samples, 31.58%)</title><rect x="444.7" y="789" width="372.7" height="15.0" fill="rgb(249,15,7)" rx="2" ry="2" />
<text  x="447.74" y="799.5" >Envoy::Server::WorkerImpl::threadRoutine(Envoy::Se..</text>
</g>
<g >
<title>sock_sendmsg (1 samples, 5.26%)</title><rect x="1065.8" y="469" width="62.1" height="15.0" fill="rgb(226,220,23)" rx="2" ry="2" />
<text  x="1068.79" y="479.5" >sock_s..</text>
</g>
<g >
<title>Envoy::Http::Http1::ConnectionImpl::dispatch(Envoy::Buffer::Instance&amp;) (1 samples, 5.26%)</title><rect x="1003.7" y="629" width="62.1" height="15.0" fill="rgb(221,48,48)" rx="2" ry="2" />
<text  x="1006.68" y="639.5" >Envoy:..</text>
</g>
<g >
<title>- (1 samples, 5.26%)</title><rect x="693.2" y="613" width="62.1" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="696.16" y="623.5" >-</text>
</g>
<g >
<title>Envoy::Network::ConnectionImpl::onFileEvent(unsigned int) (2 samples, 10.53%)</title><rect x="631.1" y="709" width="124.2" height="15.0" fill="rgb(243,13,14)" rx="2" ry="2" />
<text  x="634.05" y="719.5" >Envoy::Network:..</text>
</g>
<g >
<title>kfree (1 samples, 5.26%)</title><rect x="1065.8" y="277" width="62.1" height="15.0" fill="rgb(229,184,26)" rx="2" ry="2" />
<text  x="1068.79" y="287.5" >kfree</text>
</g>
<g >
<title>Envoy::Network::ConnectionImpl::onReadReady() (1 samples, 5.26%)</title><rect x="1003.7" y="693" width="62.1" height="15.0" fill="rgb(222,52,13)" rx="2" ry="2" />
<text  x="1006.68" y="703.5" >Envoy:..</text>
</g>
<g >
<title>tcp_sendmsg_locked (1 samples, 5.26%)</title><rect x="693.2" y="421" width="62.1" height="15.0" fill="rgb(253,76,43)" rx="2" ry="2" />
<text  x="696.16" y="431.5" >tcp_se..</text>
</g>
<g >
<title>__x64_sys_writev (1 samples, 5.26%)</title><rect x="693.2" y="565" width="62.1" height="15.0" fill="rgb(253,216,23)" rx="2" ry="2" />
<text  x="696.16" y="575.5" >__x64_..</text>
</g>
<g >
<title>Envoy::Http::Http1::ServerConnectionImpl::onMessageCompleteBase() (1 samples, 5.26%)</title><rect x="1003.7" y="533" width="62.1" height="15.0" fill="rgb(220,54,26)" rx="2" ry="2" />
<text  x="1006.68" y="543.5" >Envoy:..</text>
</g>
<g >
<title>tcp_data_queue (1 samples, 5.26%)</title><rect x="1065.8" y="357" width="62.1" height="15.0" fill="rgb(206,37,22)" rx="2" ry="2" />
<text  x="1068.79" y="367.5" >tcp_da..</text>
</g>
<g >
<title>Envoy::Network::ConnectionImpl::onFileEvent(unsigned int) (1 samples, 5.26%)</title><rect x="755.3" y="709" width="62.1" height="15.0" fill="rgb(251,166,7)" rx="2" ry="2" />
<text  x="758.26" y="719.5" >Envoy:..</text>
</g>
<g >
<title>do_softirq.part.0 (1 samples, 5.26%)</title><rect x="693.2" y="213" width="62.1" height="15.0" fill="rgb(224,100,37)" rx="2" ry="2" />
<text  x="696.16" y="223.5" >do_sof..</text>
</g>
<g >
<title>Envoy::Server::ActiveTcpSocket::continueFilterChain(bool) (1 samples, 5.26%)</title><rect x="1127.9" y="661" width="62.1" height="15.0" fill="rgb(224,107,14)" rx="2" ry="2" />
<text  x="1130.89" y="671.5" >Envoy:..</text>
</g>
<g >
<title>__ip_queue_xmit (1 samples, 5.26%)</title><rect x="693.2" y="325" width="62.1" height="15.0" fill="rgb(220,9,52)" rx="2" ry="2" />
<text  x="696.16" y="335.5" >__ip_q..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 5.26%)</title><rect x="693.2" y="581" width="62.1" height="15.0" fill="rgb(236,45,5)" rx="2" ry="2" />
<text  x="696.16" y="591.5" >do_sys..</text>
</g>
<g >
<title>Envoy::Stats::ThreadLocalStoreImpl::forEachHistogram(std::__1::function&lt;void (unsigned long)&gt;, std::__1::function&lt;void (Envoy::Stats::ParentHistogram&amp;)&gt;) const (1 samples, 5.26%)</title><rect x="320.5" y="661" width="62.1" height="15.0" fill="rgb(243,177,29)" rx="2" ry="2" />
<text  x="323.53" y="671.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Network::FilterManagerImpl::onContinueReading(Envoy::Network::FilterManagerImpl::ActiveReadFilter*, Envoy::Network::ReadBufferSource&amp;) (1 samples, 5.26%)</title><rect x="1003.7" y="677" width="62.1" height="15.0" fill="rgb(222,13,39)" rx="2" ry="2" />
<text  x="1006.68" y="687.5" >Envoy:..</text>
</g>
<g >
<title>pthread_mutex_lock (1 samples, 5.26%)</title><rect x="72.1" y="757" width="62.1" height="15.0" fill="rgb(235,98,48)" rx="2" ry="2" />
<text  x="75.11" y="767.5" >pthrea..</text>
</g>
<g >
<title>sock_write_iter (1 samples, 5.26%)</title><rect x="1065.8" y="485" width="62.1" height="15.0" fill="rgb(206,149,19)" rx="2" ry="2" />
<text  x="1068.79" y="495.5" >sock_w..</text>
</g>
<g >
<title>do_writev (1 samples, 5.26%)</title><rect x="693.2" y="549" width="62.1" height="15.0" fill="rgb(246,39,48)" rx="2" ry="2" />
<text  x="696.16" y="559.5" >do_wri..</text>
</g>
<g >
<title>Envoy::Upstream::ClusterManagerImpl::ThreadLocalClusterManagerImpl::ClusterEntry::httpConnPool(Envoy::Upstream::ResourcePriority, absl::optional&lt;Envoy::Http::Protocol&gt;, Envoy::Upstream::LoadBalancerContext*) (1 samples, 5.26%)</title><rect x="1003.7" y="421" width="62.1" height="15.0" fill="rgb(205,216,28)" rx="2" ry="2" />
<text  x="1006.68" y="431.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Server::ActiveTcpListener::onAcceptWorker(std::__1::unique_ptr&lt;Envoy::Network::ConnectionSocket, std::__1::default_delete&lt;Envoy::Network::ConnectionSocket&gt; &gt;&amp;&amp;, bool, bool) (1 samples, 5.26%)</title><rect x="1127.9" y="693" width="62.1" height="15.0" fill="rgb(248,223,35)" rx="2" ry="2" />
<text  x="1130.89" y="703.5" >Envoy:..</text>
</g>
<g >
<title>event_base_loop (4 samples, 21.05%)</title><rect x="134.2" y="741" width="248.4" height="15.0" fill="rgb(239,221,41)" rx="2" ry="2" />
<text  x="137.21" y="751.5" >event_base_loop</text>
</g>
<g >
<title>Envoy::Server::ActiveStreamListenerBase::onSocketAccepted(std::__1::unique_ptr&lt;Envoy::Server::ActiveTcpSocket, std::__1::default_delete&lt;Envoy::Server::ActiveTcpSocket&gt; &gt;) (1 samples, 5.26%)</title><rect x="1127.9" y="677" width="62.1" height="15.0" fill="rgb(240,116,40)" rx="2" ry="2" />
<text  x="1130.89" y="687.5" >Envoy:..</text>
</g>
<g >
<title>ipt_do_table (1 samples, 5.26%)</title><rect x="693.2" y="37" width="62.1" height="15.0" fill="rgb(250,76,51)" rx="2" ry="2" />
<text  x="696.16" y="47.5" >ipt_do..</text>
</g>
<g >
<title>event_base_loop (6 samples, 31.58%)</title><rect x="444.7" y="773" width="372.7" height="15.0" fill="rgb(236,71,39)" rx="2" ry="2" />
<text  x="447.74" y="783.5" >event_base_loop</text>
</g>
<g >
<title>event_process_active_single_queue (3 samples, 15.79%)</title><rect x="631.1" y="757" width="186.3" height="15.0" fill="rgb(230,73,37)" rx="2" ry="2" />
<text  x="634.05" y="767.5" >event_process_active_sin..</text>
</g>
<g >
<title>writev (1 samples, 5.26%)</title><rect x="693.2" y="629" width="62.1" height="15.0" fill="rgb(239,7,29)" rx="2" ry="2" />
<text  x="696.16" y="639.5" >writev</text>
</g>
<g >
<title>Envoy::Http::Http1::ServerConnectionImpl::dispatch(Envoy::Buffer::Instance&amp;) (1 samples, 5.26%)</title><rect x="1003.7" y="645" width="62.1" height="15.0" fill="rgb(226,228,2)" rx="2" ry="2" />
<text  x="1006.68" y="655.5" >Envoy:..</text>
</g>
<g >
<title>nf_hook_slow (1 samples, 5.26%)</title><rect x="693.2" y="85" width="62.1" height="15.0" fill="rgb(242,213,16)" rx="2" ry="2" />
<text  x="696.16" y="95.5" >nf_hoo..</text>
</g>
<g >
<title>Envoy::Network::RawBufferSocket::doWrite(Envoy::Buffer::Instance&amp;, bool) (1 samples, 5.26%)</title><rect x="693.2" y="677" width="62.1" height="15.0" fill="rgb(224,178,16)" rx="2" ry="2" />
<text  x="696.16" y="687.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Network::IoSocketHandleImpl::write(Envoy::Buffer::Instance&amp;) (1 samples, 5.26%)</title><rect x="693.2" y="661" width="62.1" height="15.0" fill="rgb(222,80,30)" rx="2" ry="2" />
<text  x="696.16" y="671.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::MainCommon::main(int, char**, std::__1::function&lt;void (Envoy::Server::Instance&amp;)&gt;) (4 samples, 21.05%)</title><rect x="134.2" y="789" width="248.4" height="15.0" fill="rgb(238,209,26)" rx="2" ry="2" />
<text  x="137.21" y="799.5" >Envoy::MainCommon::main(int, char..</text>
</g>
<g >
<title>__kfree_skb (1 samples, 5.26%)</title><rect x="1065.8" y="341" width="62.1" height="15.0" fill="rgb(252,123,49)" rx="2" ry="2" />
<text  x="1068.79" y="351.5" >__kfre..</text>
</g>
<g >
<title>Envoy::Network::IoSocketHandleImpl::write(Envoy::Buffer::Instance&amp;) (1 samples, 5.26%)</title><rect x="1065.8" y="661" width="62.1" height="15.0" fill="rgb(206,51,37)" rx="2" ry="2" />
<text  x="1068.79" y="671.5" >Envoy:..</text>
</g>
<g >
<title>absl::Mutex::Lock() (1 samples, 5.26%)</title><rect x="10.0" y="741" width="62.1" height="15.0" fill="rgb(215,187,46)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >absl::..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 5.26%)</title><rect x="693.2" y="597" width="62.1" height="15.0" fill="rgb(244,89,3)" rx="2" ry="2" />
<text  x="696.16" y="607.5" >entry_..</text>
</g>
<g >
<title>epoll_wait (1 samples, 5.26%)</title><rect x="196.3" y="725" width="62.1" height="15.0" fill="rgb(249,161,26)" rx="2" ry="2" />
<text  x="199.32" y="735.5" >epoll_..</text>
</g>
<g >
<title>__tcp_push_pending_frames (1 samples, 5.26%)</title><rect x="693.2" y="389" width="62.1" height="15.0" fill="rgb(243,103,51)" rx="2" ry="2" />
<text  x="696.16" y="399.5" >__tcp_..</text>
</g>
<g >
<title>do_writev (1 samples, 5.26%)</title><rect x="1065.8" y="549" width="62.1" height="15.0" fill="rgb(232,17,2)" rx="2" ry="2" />
<text  x="1068.79" y="559.5" >do_wri..</text>
</g>
<g >
<title>inet_sendmsg (1 samples, 5.26%)</title><rect x="693.2" y="453" width="62.1" height="15.0" fill="rgb(217,134,43)" rx="2" ry="2" />
<text  x="696.16" y="463.5" >inet_s..</text>
</g>
<g >
<title>skb_free_head (1 samples, 5.26%)</title><rect x="1065.8" y="293" width="62.1" height="15.0" fill="rgb(229,101,51)" rx="2" ry="2" />
<text  x="1068.79" y="303.5" >skb_fr..</text>
</g>
<g >
<title>Envoy::Http::Http1::LegacyHttpParserImpl::Impl::Impl(http_parser_type, void*)::{lambda(http_parser*)#3}::__invoke(http_parser*) (1 samples, 5.26%)</title><rect x="1003.7" y="565" width="62.1" height="15.0" fill="rgb(226,96,47)" rx="2" ry="2" />
<text  x="1006.68" y="575.5" >Envoy:..</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (2 samples, 10.53%)</title><rect x="506.8" y="629" width="124.3" height="15.0" fill="rgb(251,156,30)" rx="2" ry="2" />
<text  x="509.84" y="639.5" >schedule_hrtime..</text>
</g>
<g >
<title>ep_send_events_proc (1 samples, 5.26%)</title><rect x="444.7" y="613" width="62.1" height="15.0" fill="rgb(242,172,17)" rx="2" ry="2" />
<text  x="447.74" y="623.5" >ep_sen..</text>
</g>
<g >
<title>writev (1 samples, 5.26%)</title><rect x="755.3" y="629" width="62.1" height="15.0" fill="rgb(231,229,47)" rx="2" ry="2" />
<text  x="758.26" y="639.5" >writev</text>
</g>
<g >
<title>Envoy::Router::Filter::decodeHeaders(Envoy::Http::RequestHeaderMap&amp;, bool) (1 samples, 5.26%)</title><rect x="1003.7" y="485" width="62.1" height="15.0" fill="rgb(205,97,15)" rx="2" ry="2" />
<text  x="1006.68" y="495.5" >Envoy:..</text>
</g>
<g >
<title>event_process_active_single_queue (1 samples, 5.26%)</title><rect x="10.0" y="757" width="62.1" height="15.0" fill="rgb(253,177,24)" rx="2" ry="2" />
<text  x="13.00" y="767.5" >event_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 15.79%)</title><rect x="444.7" y="725" width="186.4" height="15.0" fill="rgb(222,14,31)" rx="2" ry="2" />
<text  x="447.74" y="735.5" >entry_SYSCALL_64_after_h..</text>
</g>
<g >
<title>tcp_sendmsg (1 samples, 5.26%)</title><rect x="1065.8" y="437" width="62.1" height="15.0" fill="rgb(241,25,26)" rx="2" ry="2" />
<text  x="1068.79" y="447.5" >tcp_se..</text>
</g>
<g >
<title>std::__1::__function::__func&lt;Envoy::Stats::ThreadLocalStoreImpl::mergeHistograms(std::__1::function&lt;void ()&gt;)::$_13, std::__1::allocator&lt;Envoy::Stats::ThreadLocalStoreImpl::mergeHistograms(std::__1::function&lt;void ()&gt;)::$_13&gt;, void ()&gt;::operator()() (2 samples, 10.53%)</title><rect x="258.4" y="693" width="124.2" height="15.0" fill="rgb(239,2,49)" rx="2" ry="2" />
<text  x="261.42" y="703.5" >std::__1::__fun..</text>
</g>
<g >
<title>Envoy::Stats::ThreadLocalStoreImpl::mergeInternal(std::__1::function&lt;void ()&gt;) (2 samples, 10.53%)</title><rect x="258.4" y="677" width="124.2" height="15.0" fill="rgb(242,114,24)" rx="2" ry="2" />
<text  x="261.42" y="687.5" >Envoy::Stats::T..</text>
</g>
<g >
<title>clock_gettime (1 samples, 5.26%)</title><rect x="817.4" y="821" width="62.1" height="15.0" fill="rgb(218,220,18)" rx="2" ry="2" />
<text  x="820.37" y="831.5" >clock_..</text>
</g>
<g >
<title>skb_release_data (1 samples, 5.26%)</title><rect x="1065.8" y="309" width="62.1" height="15.0" fill="rgb(239,142,35)" rx="2" ry="2" />
<text  x="1068.79" y="319.5" >skb_re..</text>
</g>
<g >
<title>clock_gettime (1 samples, 5.26%)</title><rect x="134.2" y="725" width="62.1" height="15.0" fill="rgb(216,3,1)" rx="2" ry="2" />
<text  x="137.21" y="735.5" >clock_..</text>
</g>
<g >
<title>process_backlog (1 samples, 5.26%)</title><rect x="693.2" y="149" width="62.1" height="15.0" fill="rgb(248,126,17)" rx="2" ry="2" />
<text  x="696.16" y="159.5" >proces..</text>
</g>
<g >
<title>finish_task_switch (2 samples, 10.53%)</title><rect x="506.8" y="581" width="124.3" height="15.0" fill="rgb(209,20,52)" rx="2" ry="2" />
<text  x="509.84" y="591.5" >finish_task_swi..</text>
</g>
<g >
<title>Envoy::Network::IoSocketHandleImpl::write(Envoy::Buffer::Instance&amp;) (1 samples, 5.26%)</title><rect x="755.3" y="661" width="62.1" height="15.0" fill="rgb(229,223,19)" rx="2" ry="2" />
<text  x="758.26" y="671.5" >Envoy:..</text>
</g>
<g >
<title>ipt_do_table (1 samples, 5.26%)</title><rect x="693.2" y="53" width="62.1" height="15.0" fill="rgb(236,107,42)" rx="2" ry="2" />
<text  x="696.16" y="63.5" >ipt_do..</text>
</g>
<g >
<title>Envoy::Http::Http1::ConnectionImpl::onMessageComplete() (1 samples, 5.26%)</title><rect x="1003.7" y="549" width="62.1" height="15.0" fill="rgb(248,162,16)" rx="2" ry="2" />
<text  x="1006.68" y="559.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Http::Http1::LegacyHttpParserImpl::execute(char const*, int) (1 samples, 5.26%)</title><rect x="1003.7" y="597" width="62.1" height="15.0" fill="rgb(232,127,22)" rx="2" ry="2" />
<text  x="1006.68" y="607.5" >Envoy:..</text>
</g>
<g >
<title>epoll_wait (3 samples, 15.79%)</title><rect x="444.7" y="757" width="186.4" height="15.0" fill="rgb(208,30,49)" rx="2" ry="2" />
<text  x="447.74" y="767.5" >epoll_wait</text>
</g>
<g >
<title>writev (1 samples, 5.26%)</title><rect x="1065.8" y="629" width="62.1" height="15.0" fill="rgb(217,43,39)" rx="2" ry="2" />
<text  x="1068.79" y="639.5" >writev</text>
</g>
<g >
<title>schedule (2 samples, 10.53%)</title><rect x="506.8" y="613" width="124.3" height="15.0" fill="rgb(253,56,1)" rx="2" ry="2" />
<text  x="509.84" y="623.5" >schedule</text>
</g>
<g >
<title>event_base_loop (5 samples, 26.32%)</title><rect x="879.5" y="773" width="310.5" height="15.0" fill="rgb(254,126,38)" rx="2" ry="2" />
<text  x="882.47" y="783.5" >event_base_loop</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (2 samples, 10.53%)</title><rect x="879.5" y="629" width="124.2" height="15.0" fill="rgb(245,11,26)" rx="2" ry="2" />
<text  x="882.47" y="639.5" >schedule_hrtime..</text>
</g>
<g >
<title>__x64_sys_epoll_wait (3 samples, 15.79%)</title><rect x="444.7" y="693" width="186.4" height="15.0" fill="rgb(214,37,13)" rx="2" ry="2" />
<text  x="447.74" y="703.5" >__x64_sys_epoll_wait</text>
</g>
<g >
<title>std::__1::__function::__func&lt;Envoy::Event::FileEventImpl::FileEventImpl(Envoy::Event::DispatcherImpl&amp;, int, std::__1::function&lt;void (unsigned int)&gt;, Envoy::Event::FileTriggerType, unsigned int)::$_0, std::__1::allocator&lt;Envoy::Event::FileEventImpl::FileEventImpl(Envoy::Event::DispatcherImpl&amp;, int, std::__1::function&lt;void (unsigned int)&gt;, Envoy::Event::FileTriggerType, unsigned int)::$_0&gt;, void ()&gt;::operator()() (1 samples, 5.26%)</title><rect x="755.3" y="741" width="62.1" height="15.0" fill="rgb(226,92,11)" rx="2" ry="2" />
<text  x="758.26" y="751.5" >std::_..</text>
</g>
<g >
<title>ip_finish_output (1 samples, 5.26%)</title><rect x="693.2" y="277" width="62.1" height="15.0" fill="rgb(233,21,5)" rx="2" ry="2" />
<text  x="696.16" y="287.5" >ip_fin..</text>
</g>
<g >
<title>sock_write_iter (1 samples, 5.26%)</title><rect x="693.2" y="485" width="62.1" height="15.0" fill="rgb(207,35,4)" rx="2" ry="2" />
<text  x="696.16" y="495.5" >sock_w..</text>
</g>
<g >
<title>do_epoll_wait (2 samples, 10.53%)</title><rect x="879.5" y="677" width="124.2" height="15.0" fill="rgb(236,139,7)" rx="2" ry="2" />
<text  x="882.47" y="687.5" >do_epoll_wait</text>
</g>
<g >
<title>Envoy::Http::FilterManager::decodeHeaders(Envoy::Http::ActiveStreamDecoderFilter*, Envoy::Http::RequestHeaderMap&amp;, bool) (1 samples, 5.26%)</title><rect x="1003.7" y="501" width="62.1" height="15.0" fill="rgb(227,207,1)" rx="2" ry="2" />
<text  x="1006.68" y="511.5" >Envoy:..</text>
</g>
<g >
<title>Envoy::Network::IoSocketHandleImpl::writev(Envoy::Buffer::RawSlice const*, unsigned long) (1 samples, 5.26%)</title><rect x="755.3" y="645" width="62.1" height="15.0" fill="rgb(233,24,8)" rx="2" ry="2" />
<text  x="758.26" y="655.5" >Envoy:..</text>
</g>
<g >
<title>__schedule (2 samples, 10.53%)</title><rect x="506.8" y="597" width="124.3" height="15.0" fill="rgb(232,192,26)" rx="2" ry="2" />
<text  x="509.84" y="607.5" >__schedule</text>
</g>
<g >
<title>Envoy::Network::RawBufferSocket::doWrite(Envoy::Buffer::Instance&amp;, bool) (1 samples, 5.26%)</title><rect x="1065.8" y="677" width="62.1" height="15.0" fill="rgb(214,85,8)" rx="2" ry="2" />
<text  x="1068.79" y="687.5" >Envoy:..</text>
</g>
<g >
<title>- (1 samples, 5.26%)</title><rect x="1065.8" y="613" width="62.1" height="15.0" fill="rgb(200,200,200)" rx="2" ry="2" />
<text  x="1068.79" y="623.5" >-</text>
</g>
<g >
<title>event_process_active_single_queue (2 samples, 10.53%)</title><rect x="258.4" y="725" width="124.2" height="15.0" fill="rgb(222,59,33)" rx="2" ry="2" />
<text  x="261.42" y="735.5" >event_process_a..</text>
</g>
<g >
<title>Envoy::Network::ConnectionImpl::onFileEvent(unsigned int) (2 samples, 10.53%)</title><rect x="1003.7" y="709" width="124.2" height="15.0" fill="rgb(224,165,43)" rx="2" ry="2" />
<text  x="1006.68" y="719.5" >Envoy::Network:..</text>
</g>
<g >
<title>finish_task_switch (2 samples, 10.53%)</title><rect x="879.5" y="581" width="124.2" height="15.0" fill="rgb(229,146,5)" rx="2" ry="2" />
<text  x="882.47" y="591.5" >finish_task_swi..</text>
</g>
<g >
<title>__netif_receive_skb_one_core (1 samples, 5.26%)</title><rect x="693.2" y="117" width="62.1" height="15.0" fill="rgb(253,72,48)" rx="2" ry="2" />
<text  x="696.16" y="127.5" >__neti..</text>
</g>
<g >
<title>do_iter_readv_writev (1 samples, 5.26%)</title><rect x="693.2" y="501" width="62.1" height="15.0" fill="rgb(248,58,49)" rx="2" ry="2" />
<text  x="696.16" y="511.5" >do_ite..</text>
</g>
</g>
</svg>
